* Backup
** Checklist
   - [-] Bookmarks
     - [ ] Firefox
     - [ ] Thunderbird
     - [X] Chrome
   - [ ] GNOME Keyring
   - [ ] Thunderbird
   - [ ] GPG
     - [ ] Export public key ring (=pubring.gpg=)
     - [ ] Export owner-trust list (=owner_trust.lst=)
   - [ ] Predownloaded
     - [ ] Newest Nvidia Drivers
     - [ ] Chromium
   - [ ] Virtual Machines
   - [ ] History
     - [ ] ~$HOME/.zsh_history~
     - [ ] ~$HOME/.psql_history-*~
     - [ ] ~$HOME/.bash_history-*~
     - [ ] ~$HOME/.ipython/profile_default/history.sqlite*~
   - [ ] Documents
     - [ ] ~$HOME/Documents~
     - [ ] ~$HOME/Books~
     - [ ] ~$HOME/Pictures~
     - [ ] ~$HOME/Music~

** Home
*** Layout
    - $HOME/Documents/ :: Contains local documents & records
    - $HOME/Books :: Saved eBooks
    - $HOME/Pictures :: Saved pictures & screenshots
    - $HOME/Development :: Source code of personally developed software
    - $HOME/dotfilez :: Contains configuration (/rc/) files which are checked-in to version control.
    - $HOME/zv.github.io :: Github pages site
    - $HOME/extern :: Source code & binaries from external sources

*** Archive
    #+BEGIN_SRC python :results output
      import datetime
      import pathlib
      
      BACKUP_FILE = pathlib.Path(
          '/run/media/zv/4712695a-e37f-477c-a48a-907b7a3bde6c/backup-{:%Y-%m-%d}.tar.gz'
          .format(datetime.datetime.utcnow()))
      HOME = pathlib.Path.home()
      
      cmdline = [
          "tar",
          "--create",
          "--file '%s'" % BACKUP_FILE,
          "--verbose",
          "--preserve-permissions",
          "--one-file-system",
          "--auto-compress",
          "--directory='%s'" % HOME,
          "--exclude='*/*.*.sw?'",
          "--exclude='*/__pycache__'",
          "--exclude='*/.pytest_cache'",
          "--exclude='*/.mypy_cache'",
          "--exclude='*/.sass-cache'",
          "--exclude='*/.tox'",
          "--exclude='*/.jekyll-cache'",
          "--exclude='*/TAGS'",
          "--exclude='*/node_modules'",
          "--exclude='%s'" % HOME.joinpath('Development/*/venv'),
          "--exclude='%s'" % HOME.joinpath('Development/*/.venv'),
          "--exclude='%s'" % HOME.joinpath('Development/campuslaunch-mvp'),
          "--exclude='%s'" % HOME.joinpath('Development/polyswarm'),
          "--exclude='%s'" % HOME.joinpath('Development/sochat'),
          "--exclude='%s'" % HOME.joinpath('dotfilez/emacs.d'),
      ]
      
      dirs = (
          ".auth_info",
          ".aws/config",
          ".aws/credentials",
          ".bash_history",
          ".kube/config",
          ".local/share/keyrings",
          ".ipython/profile_default/history.sqlite",
          ".netrc",
          ".psql_history",
          ".zsh_history",
          "Backup",
          "Books",
          "Development",
          "Documents",
          "Music",
          "Pictures",
          "dotfilez",
          "zv.github.io",
          ".ssh",
          ".gnupg",
      )
      cmdline.extend(f"'{d}'" for d in map(HOME.joinpath, dirs) if d.exists())
      
      print(' \\\n\t'.join(cmdline))
    #+END_SRC

**** Restore
     You can extract an archive built with the =tar= command generated above with:
    
      #+BEGIN_SRC sh :results output
        cd $HOME
        tar --extract --file '$BACKUP_FILE'
      #+END_SRC
    
** Software
*** Thunderbird
    :PROPERTIES:
    :header-args: :dir thunderbird
    :END:

**** Profile
     #+BEGIN_SRC sh
       if test -d "$HOME/.thunderbird/"; then
           tar --create \
               -C "$HOME/.thunderbird/" \
               --exclude-from=".tar_exclude" \
               --file "thunderbird.tar"
       else
           printf "No thunderbird profile found at %s\n" "$HOME/.thunderbird/"
       fi
     #+END_SRC

***** Restore
      #+BEGIN_SRC sh
        tar --extract --file "$THUNDERBIRD_PROFILE_ARCHIVE" --directory "$HOME/.thunderbird"
      #+END_SRC

*** GnuPG
    
**** Export
     
***** Keys
      #+NAME: keys.asc
      #+BEGIN_SRC sh :results output
        gpg --export --export-options backup -a
      #+END_SRC

***** Owner Trust
      #+NAME: owner_trust.lst
      #+BEGIN_SRC sh :results output
        gpg --export-ownertrust
      #+END_SRC

**** Import

***** Keys     
     #+BEGIN_SRC sh :results output
       gpg --import --import-options restore keys.asc
     #+END_SRC
     
***** Owner Trust
     #+BEGIN_SRC sh :results output
       gpg --import-ownertrust owner_trust.lst
     #+END_SRC
     
***** Fetching on-card keys
      You can also fetch any of the private keys stored on a smartcard using the following:
      
      #+BEGIN_EXAMPLE 
      $ gpg --edit-card
      ...
      gpg/card> fetch
      #+END_EXAMPLE
