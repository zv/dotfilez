* Backup
** Checklist
   - [-] Bookmarks
     - [ ] Firefox
     - [ ] Thunderbird
     - [X] Chrome
   - [ ] GNOME Keyring
   - [ ] Thunderbird
   - [ ] GPG
     - [ ] Export public key ring (=pubring.gpg=)
     - [ ] Export owner-trust list (=owner_trust.lst=)
   - [ ] Predownloaded
     - [ ] Newest Nvidia Drivers
     - [ ] Chromium
   - [ ] Virtual Machines
   - [ ] History
     - [ ] ~$HOME/.zsh_history~
     - [ ] ~$HOME/.psql_history-*~
     - [ ] ~$HOME/.bash_history-*~
     - [ ] ~$HOME/.ipython/profile_default/history.sqlite*~
   - [ ] Documents
     - [ ] ~$HOME/Documents~
     - [ ] ~$HOME/Books~
     - [ ] ~$HOME/Pictures~
     - [ ] ~$HOME/Music~

** Home
*** Layout
    - $HOME/Documents/ :: Contains local documents & records
    - $HOME/Books :: Saved eBooks
    - $HOME/Pictures :: Saved pictures & screenshots
    - $HOME/Development :: Source code of personally developed software
    - $HOME/dotfilez :: Contains configuration (/rc/) files which are checked-in to version control.
    - $HOME/zv.github.io :: Github pages site
    - $HOME/extern :: Source code & binaries from external sources

*** Archive
    #+BEGIN_SRC python :results output
      import datetime as dt
      from pathlib import Path
      
      OUTDIR = Path('/run/media/zv/4712695a-e37f-477c-a48a-907b7a3bde6c')
      date = f'{dt.datetime.now():%Y-%m-%d}'
      BACKUP_FILE = OUTDIR.joinpath(f'backup-{date}.tar.gz')
      home = Path.home()
      
      print(f"""tar \\
          --create \\
          --file '{BACKUP_FILE!s}' \\
          --verbose \\
          --preserve-permissions \\
          --one-file-system \\
          --auto-compress \\
          --directory='{home!s}' \\
          --exclude='*/*.*.sw?' \\
          --exclude='*/.mypy_cache' \\
          --exclude='*/.sass-cache' \\
          --exclude='*/.tox' \\
          --exclude='*/.venv' \\
          --exclude='*/.jekyll-cache' \\
          --exclude='*/TAGS' \\
          --exclude='*/node_modules' \\
          --exclude='Development/*/venv' \\
          --exclude='Development/campuslaunch-mvp' \\
          --exclude='Development/polyswarm' \\
          --exclude='Development/sochat' \\
          --exclude='dotfilez/emacs.d'""",
            end='')
      
      dirs = [
          ".auth_info",
          ".aws/config",
          ".aws/credentials",
          ".bash_history",
          ".kube/config",
          ".local/share/keyrings",
          ".ipython/profile_default/history.sqlite",
          ".netrc",
          ".psql_history",
          ".zsh_history",
          "Backup",
          "Books",
          "Development",
          "Documents",
          "Music",
          "Pictures",
          "dotfilez",
          "zv.github.io",
      ]
      
      if home.joinpath('.ssh').resolve() != home.joinpath('dotfilez/rc/ssh'):
          dirs.append('.ssh')
      
      if home.joinpath('.gnupg').resolve() != home.joinpath('dotfilez/rc/gnupg'):
          dirs.append('.gnupg')
      
      for d in dirs:
          if home.joinpath(d).exists():
              print(f" \\\n    '{d}'", end='')
      
      print('')
    #+END_SRC

** Software
*** Thunderbird
    :PROPERTIES:
    :header-args: :dir thunderbird
    :END:

**** Profile
     #+BEGIN_SRC sh
       if test -d "$HOME/.thunderbird/"; then
           tar --create \
               -C "$HOME/.thunderbird/" \
               --exclude-from=".tar_exclude" \
               --file "thunderbird.tar"
       else
           printf "No thunderbird profile found at %s\n" "$HOME/.thunderbird/"
       fi
     #+END_SRC

***** Restore
      #+BEGIN_SRC sh
        tar --extract --file "$THUNDERBIRD_PROFILE_ARCHIVE" --directory "$HOME/.thunderbird"
      #+END_SRC

*** GnuPG
**** Owner Trust
     #+NAME: owner_trust.lst
     #+BEGIN_SRC sh :results output :exports results
       gpg --export-ownertrust
     #+END_SRC

     You can import =owner_trust.lst= by doing:

     #+BEGIN_SRC sh :results output
       gpg --import-ownertrust owner_trust.lst
     #+END_SRC
