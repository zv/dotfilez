[user]
	name       = Zephyr Pellerin
	email      = zv@nxvr.org
	editor     = vim
	signingkey = 0xF6F2D0445DC172F8

[github]
	user = zv

[remote "origin"]
	fetch = +refs/pull/*/head:refs/remotes/origin/pr/*

[format]
	signoff = true

[color]
	ui = true
	pager = true

[color "decorate"]
	stash = "red bold "

[color "branch"]
	current = green reverse
	local		= yellow
	remote	= green

[color "diff"]
	meta		= yellow
	frag		= magenta bold
	old			= red
	new			= green
	commit	= cyan
	func		= red bold

[color "status"]
	added			= green
	changed		= yellow
	untracked = red
	nobranch	= red bold reverse

[alias]
	# commits not pushed to $1, master by default
	unpushed			= cherry -v

	# what branch contains the sha
	contains			= branch --contains

	# https://github.com/prabirshrestha/ProfilesAndSettings/blob/master/.gitconfig
	# show tags and any tag annotation (tito adds tag annotations for example)
	tags					= tag -n1 -l

	# show a list of every branch and show their latests commit, sorted by last commit
	branch-log				= "!sh -c 'for C in $(git for-each-ref --sort=committerdate refs/heads --format=\"%(refname:short)\") ; do git show  -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset  $C\" \"$C\" -- ; git show --stat -s $C ; echo; done'"
	branch-log-remote = "!sh -c 'for C in $(git for-each-ref --sort=committerdate refs/remotes/origin --format=\"%(refname:short)\") ; do git show  -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset  $C\" \"$C\" -- ; git show --stat -s $C ; echo; done'"

	whatis				= show -s --pretty='tformat:%h (%s, %ad)' --date=short

	ancestor			= !bash -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
	
	whats-new     = !sh -c 'git log $1@{1}..$1@{0} "$@"'

	# Branch Diff
	branch-diff		= "!f() { head=${1:-HEAD} ; ancestor=`git oldest-ancestor master $head` ; git diff $ancestor..$head ; }; f"
	branch-vdiff	= "!f() { head=${1:-HEAD} ; ancestor=`git oldest-ancestor master $head` ; git diff --name-only $ancestor..$head | xargs diffuse -s -r $ancestor ; }; f &"

	# add
	a							= add            # add
	pa  					= add --patch # stage commits chunk by chunk

	# branch
	b							= branch -v                     # branch (verbose)

	# commit
	c							= commit -m          # commit with message
	ca						= commit -am        # commit all with message
	ci						= commit            # commit
	amend					= commit --amend # ammend your last commit

	# checkout
	co						= checkout    # checkout
	nb						= checkout -b # create and switch to a new branch (mnemonic: "git new branch branchname...")

	# cherry-pick
	cp						= cherry-pick -x # grab a change from a branch

	churn					= !"git log -M -C --name-only --format=\"format:%n\" | grep . | sort | uniq -c | sort -n"

	# diff
	# d						= difftool
	d							= !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
	dc						= diff --cached # diff staged changes
	last					= diff HEAD^  # diff last committed change

	# log
	l							= log --date=short --pretty=\"format:%ad%  %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset\"
	ll						= log --graph --oneline --decorate --branches --tags
	# A shortcut for seeing the fetched commits
	lc						= log ORIG_HEAD.. --stat --no-merges
	lsig					= log  --pretty=format:\"%ad%  %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) %m [%G?]%Creset\"
	lol						= log --graph --decorate --pretty=oneline --abbrev-commit
	lola					= log --graph --decorate --pretty=oneline --abbrev-commit --all
	changes				= log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
	short					= log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
	changelog			= log --pretty=format:\" * %s\"

	# Show our branches as a tree
	prtree				= log --graph --simplify-by-decoration --pretty=format:'%d' --all

	# rebase
	rc						= rebase --continue            # continue rebase
	rs						= rebase --skip                # skip rebase

	# remote
	r							= remote -v                     # show remotes (verbose)

	# edit unmerged paths
	edit-unmerged	= "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; vim `f`"
	add-unmerged	= "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; git add `f`"

	# reset
	unstage				= reset HEAD              # remove files from index (tracking)
	uncommit			= reset --soft HEAD^     # go back before last commit, with files in uncommitted state
	filelog				= log -u                  # show changes to a file

	# rm
	remove-cache	= !sh -c"git rm $(git ls-files --deleted)" # Remove files from git that are deleted.

	# stash
	stashlast			= stash apply stash@{0} # apply the most recently made stash
	sl						= stash list

	# unstage to HEAD
	unstage				= reset HEAD --

	branchlog			= for-each-ref --sort=-committerdate refs/heads/ # sort branches by last commit date

	# temporary ignore/unignore
	ignore				= update-index --assume-unchanged
	unignore			= update-index --no-assume-unchanged
	list-ignored	=!sh -c "git ls-files -v|grep '^h'" # list our ignored files
[log]
	date = short

[merge]
	summary = true
	verbosity = 1
	tool = vimdiff

[branch]
	autosetupmerge = true
	
[core]
	# true resulted in some painful dialog with Windows developers.
	autocrlf = false
	editor = vim
	excludesfile = ~/.gitignore
	
[advice]
	statusHints = false

[apply]
	whitespace = nowarn
	
[diff]
	# Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
	# instead of a/b/c/d as prefixes for patches
	mnemonicprefix = true
	algorithm      = patience
	tool           = vimdiff
	guitool        = gvimdiff

[push]
	default = current

[rebase]
	stat = true

[difftool]
	prompt = true
