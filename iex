# zephyr's elixir rc file
# github.com/zv
IO.puts "zv"
alias System, as: S
IO.puts "Working Directory: #{S.cwd()}"
IO.puts "Build tag: #{S.build_info()[:tag]}"
IO.puts "Build date: #{S.build_info()[:date]}"
IO.puts "Arguments: #{S.argv()}"
IO.puts "Virtual PID: #{S.get_pid()}"

IEx.Options.set :colors, eval_result: :"magenta"
IEx.Options.set :inspect, limit: 15 # Only show 15 items in pretty print 
IEx.Options.set :history_size, 2000



# set up a few data structures that are useful in iex from time to time 
defmodule Data.Dict do
  alias Data.Dictionary, as: D
  alias Data.Contains, as: C

  defdelegate get(self, key), to: D
  defdelegate get(self, key, default), to: D
  defdelegate get!(self, key), to: D
  defdelegate put(self, key, value), to: D
  defdelegate delete(self, key), to: D
  defdelegate keys(self), to: D
  defdelegate values(self), to: D

  def put_new(self, key, value) do
    if C.contains?(self, key) do
      self
    else
      D.put(self, key, value)
    end
  end

  def update(self, key, updater) do
    D.put(self, key, updater.(D.get!(self, key)))
  end

  def update(self, key, initial, updater) do
    D.put(self, key, updater.(D.get(self, key, initial)))
  end
end


defprotocol Data.Contains do
  def contains?(self, what)
end

defimpl Data.Contains, for: List do
  def contains?([], _) do
    false
  end

  def contains?([{ _, _ } | _] = self, { _, _ } = what) do
    :lists.member(what, self)
  end

  def contains?([{ _, _ } | _] = self, key) do
    :lists.keymember(key, 1, self)
  end

  def contains?(self, what) do
    :lists.member(what, self)
  end
end


