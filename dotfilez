#!/bin/bash
BASEDIR="$(dirname "$(readlink -f "$0")")"
DATADIR="$BASEDIR/data"

set -euo pipefail

usage() {
    cat << EOF
Usage: ./$0

Flags:
  -l <TAG>         - Iterate through data/destination, linking all files matching tag (links all if 'all' is provided as tag)
  -u <TAG>         - Iterate through data/destination, removing all which matchtag (unlinks all if 'all' is provided as tag)
  -p <TAG>         - Install all packages with TAG (installs all if 'all' is tag)
EOF
}

function set_secure_permissions() {
    gs=($HOME/.gnupg $HOME/.ssh $HOME/.ssh/* $HOME/.gnupg/*)
    chmod -f go-rwx ${gs[@]} > /dev/null 2>&1
}

function match_tag() {
    taglist="$1"
    tag="$2"
    [[ "$tag" == "all" || "$taglist" =~ $tag ]]
}

function link_tags() {
    tag="$1"
    tail -n "+3" "$DATADIR/destination" | envsubst | {
        while IFS='|' read -r target taglist dest; do
            if match_tag "$taglist", "$tag"; then
                (
                    dest="${dest// }"
                    if [[ -d "$(dirname $dest)" ]]; then
                        set -x
                        ln -Tis "${target// }" $dest
                    else
                        echo "base directory not found, skipping"
                    fi
                )
            fi
        done
    }
    ( set_secure_permissions )
}

function unlink_tags() {
    tag="$1"
    tail -n "+3" "$DATADIR/destination" | envsubst | {
        while IFS='|' read -r target taglist dest; do
            if match_tag "$taglist", "$tag"; then
                (
                    dest="${dest// }"
                    if [[ -e $dest ]]; then
                        set -x
                        rm -r "$dest"
                    else
                        echo "couldn't find $dest, skipping"
                    fi
                )
            fi
        done
    }
}

function install_package_tags() {
    tag="$1"
    pkgs=($(tail -n "+3" "$DATADIR/packages" | {
        while IFS='|' read -r name _desc taglist; do
            if match_tag "$taglist", "$tag"; then
                # This 'double echo' is intended to get rid of leading/trailing
                # whitespace without resorting to the much longer parameter
                # expansion flags.
                echo "'$(echo $name)'"
            fi
        done
    }))
    echo dnf install -y "${pkgs[*]}"
}

while getopts "l:u:p:h" o; do
    case "${o}" in
        l) link_tags "${OPTARG}" ;;
        u) unlink_tags "${OPTARG}" ;;
        p) install_package_tags "${OPTARG}" ;;
        h) usage ;;
        *) usage ;;
    esac
done
shift $((OPTIND-1))
