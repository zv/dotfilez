#+PROPERTY: header-args:      :noweb no
#+PROPERTY: header-args:sh:   :var DOTFILEZ=(directory-file-name (file-name-directory (buffer-file-name)))

* dotfilez
  #+CAPTION: the_setup
  #+NAME:   setup.png
  [[./data/setup.png]]

  The setup of my ride has been steadily growing for almost 13 years now. In the
  vast sea of rc files, =/etc= config clauses, sensitive and public
  cryptographic key material, documents, default package lists and custom
  patches that I apply to the systems I run. I had to come up with a way to manage
  it all in some sane fashion.

  Dotfilez is an attempt to keep a configuration framework for my personal use
  online. You are welcome to modify it if you think it could be useful to you
  too.

* Public Keys
** =authorized_keys=
   #+BEGIN_EXAMPLE
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCMbMY01S86OnaP7Q5H9kYHeBUdfTsZkGh1AwQC1VJIwXRHdldRigkFxCLR6QJkFVQt5ntruvXwBre1bDF04UveXLLtcq2P5iGZWgQtuVAsZ1DAENR5N+SMZY6DA/aPjg8tzv7lL09pwFkAxfVDWLEZXtcEuuCaaGbW9GH707MBnvMZn8rWD8MEEEflkrtpbTGxjrsubYqGOB9bL3PTEtrKBAhptaIHIhX7tcHBHoWVCNgt47U+zghg4VaJIj/c+TUY+1CUF/QWqfWl6En2JwLqKe8RhH4SqgWMt6WY5XDXurJHNjtlzSCbwf8jrXfSZq+63WLFxqdINyjqedkLSVhl zv@sigstkflt
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJZiX9CJyfQ2QYkm9Sh+BRoQVeM5UACdbOhf8PYfrwSC zv@sigstkflt
   #+END_EXAMPLE

** GnuPG Key
   #+NAME: GPG Key
   #+BEGIN_SRC sh :results file :file zv.gpg.pub :exports both
     gpg --export --armor 9358C8BDAAD9A62BB08B9660F6F2D0445DC172F8
   #+END_SRC

   #+RESULTS: GPG Key
   [[file:zv.gpg.pub]]

* Workstation Setup

** Packages

*** Base
    #+BEGIN_SRC sh :results output
      dnf list tmux vim-enhanced zsh
    #+END_SRC

*** Development
    #+BEGIN_SRC sh :results output
      dnf list autoconf automake binutils bison clang cmake ctags flex \
          gcc gcc-c++ gdb git graphviz libtool make nasm openssl patch \
          pkgconf readline socat strace
    #+END_SRC

**** Python
     #+BEGIN_SRC sh :results output
       dnf list python3 python3-devel python3-ipython \
           python3-epc python3-flake8 python3-importmagic python3-isort python3-mypy python3-yapf
     #+END_SRC

*** Desktop
    #+BEGIN_SRC sh :results output
      dnf list adobe-source-code-pro-fonts avahi-tools bpftool bpftrace curl \
          dotnet elfutils emacs global global-ctags gnupg2 java-latest-openjdk jq \
          kernel-devel ltrace mtr nmap perf postgresql qemu ripgrep systemtap \
          valgrind weechat wget wine wireshark xsel z3
    #+END_SRC

**** Yubikey
     #+BEGIN_SRC sh :results output
       dnf list gnupg2 gnupg2-smime pcsc-lite pcsc-tools ykclient ykpers yubikey-personalization-gui
     #+END_SRC

**** Remove "Install Package To Provide"
     Fedora contains a package to prompt the user if a missing command is typed into the shell, which this snippet disables.

     #+BEGIN_SRC sh :results output
       sudo dnf remove PackageKit-command-not-found
     #+END_SRC


** Link rc files
   #+NAME: link_all.sh
   #+BEGIN_SRC sh :results output
     #!/bin/sh
     DOTFILEZ="${DOTFILEZ:-0}"

     set -euo pipefail

     symlink_at() {
         local src="$1"
         local dst="$2"

         if [[ -e "$dst" ]]; then
             printf "%s already exists\n" "$dst"
         elif [[ -d "$src" ]]; then
             ( set -x; ln -s -t "$dst" "$src" )
         elif [[ -f "$src" ]]; then
             ( set -x; ln -Ts "$src" "$dst" )
         else
             printf "%s is not a directory or file\n" "$src"
         fi
     }

     link_all() {
         if command -v "$1" 2>&1 > /dev/null; then
             shift

             while (( $# )); do
                 symlink_at "$1" "${HOME}/.$(basename "$1")"
                 shift
             done
         else
             printf "command '%s' not found\n" "$1"
         fi
     }

     link_all dig "$DOTFILEZ/rc/digrc"
     link_all emacs "$DOTFILEZ/rc/spacemacs" "$DOTFILEZ/emacs.d" "$DOTFILEZ/rc/gnus.el" "$DOTFILEZ/rc/newsrc"
     link_all erl "$DOTFILEZ/rc/erlang"
     link_all gdb "$DOTFILEZ/rc/gdbinit"
     link_all git "$DOTFILEZ/rc/gitignore" "$DOTFILEZ/rc/gitconfig"
     link_all gpg "$DOTFILEZ/rc/gnupg"
     link_all iex "$DOTFILEZ/rc/iex"
     link_all node "$DOTFILEZ/rc/npmrc" "$DOTFILEZ/rc/babelrc"
     link_all psql "$DOTFILEZ/rc/psqlrc"
     link_all rg "$DOTFILEZ/rc/ripgreprc"
     link_all ruby "$DOTFILEZ/rc/pryrc" "$DOTFILEZ/rc/gemrc"
     link_all screen "$DOTFILEZ/rc/screenrc"
     link_all screen "$DOTFILEZ/rc/screenrc"
     link_all tmux "$DOTFILEZ/rc/tmux.conf"
     link_all top "$DOTFILEZ/rc/toprc"
     link_all vim "$DOTFILEZ/rc/vim" "$DOTFILEZ/rc/vimrc"
     link_all weechat "$DOTFILEZ/rc/weechat"
     link_all wget "$DOTFILEZ/rc/wgetrc"
     link_all zsh "$DOTFILEZ/rc/zsh" "$DOTFILEZ/rc/zshenv" "$DOTFILEZ/rc/zshrc"
     link_all Xorg "$DOTFILEZ/rc/Xsession" "$DOTFILEZ/rc/Xdefaults"

     symlink_at "$DOTFILEZ/rc/ssh" "$HOME/.ssh"
     symlink_at "$DOTFILEZ/rc/editrc" "$HOME/.editrc"
     symlink_at "$DOTFILEZ/rc/inputrc" "$HOME/.inputrc"
   #+END_SRC

*** Default shell
    #+BEGIN_SRC sh :results output
      sudo usermod  --shell "$(which zsh)" "$(whoami)"
    #+END_SRC

** org-protocol
   org-protocol intercepts calls from emacsclient to trigger custom actions without external dependencies. Only one protocol has to be configured with your external applications or the operating system, to trigger an arbitrary number of custom actions.

   #+BEGIN_SRC conf :tangle "~/.local/share/applications/org-protocol.desktop"
     [Desktop Entry]
     Name=org-protocol
     Exec=emacsclient %u
     Type=Application
     Terminal=false
     Categories=System;
     MimeType=x-scheme-handler/org-protocol;
   #+END_SRC

*** Install
    You must run =update-desktop-database= after adding a ~.desktop~ file.

    #+BEGIN_SRC sh :results silent
      update-desktop-database "$HOME/.local/share/applications/"
    #+END_SRC


** polkit
   polkit is an application-level toolkit for defining and handling the policy that allows unprivileged processes to speak to privileged processes: It is a framework for centralizing the decision making process with respect to granting access to privileged operations for unprivileged applications.

*** =libvirt=
    =libvirt= will complain about user-sessions hitting a root, I allow any user in =wheel= to do so anyway on my workstation.
    #+name: 80-libvirt.rules
    #+BEGIN_SRC javascript :tangle "/sudo::/etc/polkit-1/rules.d/80-libvirt.rules"
      polkit.addRule(function(action, subject) {
        if (action.id == "org.libvirt.unix.manage" && subject.local && subject.active && subject.isInGroup("wheel")) {
          return polkit.Result.YES;
        }
      });
    #+END_SRC

** Python

*** =IPython= config
    Rewrites the default ~$HOME/.ipython/profile_default/ipython_config.py~ with my preferred defaults

    #+BEGIN_SRC awk :results file :file "~/.ipython/profile_default/ipython_config.py" :exports both
      #!/usr/bin/awk -f

      BEGIN {
          if (ARGC == 1) {
              ARGV[ARGC] = ENVIRON["HOME"] "/.ipython/profile_default/ipython_config.py"
              ARGC = ARGC + 1
          }
      }

      function set_value(new) {
          if ($2 == "=" && NF == 3) {
              sub("^#", "", $1)  # uncomment line
              printf "%s = %s\n", $1, new
              next
          }
      }

      $1 ~ /#c.TerminalIPythonApp.display_banner/ { set_value("False") }
      $1 ~ /#c.TerminalInteractiveShell.editing_mode/ { set_value("'vi'") }
      $1 ~ /#c.TerminalInteractiveShell.extra_open_editor_shortcuts/ { set_value("False") }
      $1 ~ /#c.InteractiveShell.autoindent/ { set_value("True") }
      $1 ~ /#c.InteractiveShell.autoawait/ { set_value("True") }

      { print }
    #+END_SRC

** =udev=
   =udev= is a device manager for the Linux kernel. As the successor of
   =devfsd= and =hotplug=, =udev= primarily manages device nodes in the =/dev=
   directory. At the same time, =udev= also handles all user space events
   raised while hardware devices are added into the system or removed from it,
   including firmware loading as required by certain devices.

*** Yubikey
    Add Yubikey access

    #+name: 70-u2f.rules
    #+BEGIN_SRC conf :tangle "/sudo::/etc/udev/rules.d/70-u2f.rules" :noweb yes
      # Yubico YubiKey

      KERNEL=="hidraw*", SUBSYSTEM=="hidraw", ATTRS{idVendor}=="1050", ATTRS{idProduct}=="0113|0114|0115|0116|0120|0200|0402|0403|0406|0407|0410", TAG+="uaccess"
    #+END_SRC

*** Wireshark (=usbmon=)

    #+name: 90-wireshark-usbmon.rules
    #+BEGIN_SRC conf :tangle "/sudo::/etc/udev/rules.d/90-wireshark-usbmon.rules"
      # Wireshark

      SUBSYSTEM=="usbmon", GROUP="usbmon", MODE="640"
    #+END_SRC

** systemd

*** GnuPG
**** Socket-activated =dirmngr=
     #+BEGIN_SRC sh :results output
       systemctl --user enable dirmngr.socket
     #+END_SRC

**** Socket-activated =gpg-agent= with SSH support
     #+BEGIN_SRC sh :results output
       systemctl --user enable gpg-agent.socket gpg-agent-ssh.socket
     #+END_SRC

*** =coredump=
    I've never ended up with 20 gigabytes of coredump files, but I'd like to avoid it.
    #+name: coredump.conf
    #+BEGIN_SRC conf :tangle "/sudo::/etc/systemd/coredump.conf"
      # See coredump.conf(5) for details.

      [Coredump]
      #Storage=external
      Compress=yes
      #ProcessSizeMax=2G
      #ExternalSizeMax=2G
      JournalSizeMax=767M
      MaxUse=1G
      #KeepFree=
    #+END_SRC

** Gnome
*** Settings
    #+NAME: keybindings.sh
    #+BEGIN_SRC sh :results output :exports results
      schema_key() {
          printf "gsettings set %s %s \"%s\"\n" "$1" "$2" "$(gsettings get "$1" "$2")"
      }

      # Remove obscenely tall headerbar in gnome-terminal
      schema_key org.gnome.Terminal.Legacy.Settings headerbar

      # Swap Caps-lock & alt
      schema_key org.gnome.desktop.input-sources xkb-options

      # Dump of Gnome window keybindings
      local key
      for key in $(gsettings list-keys org.gnome.desktop.wm.keybindings); do
          schema_key org.gnome.desktop.wm.keybindings "$key"
      done
    #+END_SRC

    #+RESULTS: keybindings.sh
    #+begin_example
    gsettings set org.gnome.Terminal.Legacy.Settings headerbar "@mb false"
    gsettings set org.gnome.desktop.input-sources xkb-options "['ctrl:ralt_rctrl', 'ctrl:rctrl_ralt', 'ctrl:nocaps', 'lv3:ralt_switch']"
    gsettings set org.gnome.desktop.wm.keybindings switch-group "@as []"
    gsettings set org.gnome.desktop.wm.keybindings begin-resize "['<Alt>F8']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-7 "['<Super>u']"
    gsettings set org.gnome.desktop.wm.keybindings begin-move "['<Alt>F7']"
    gsettings set org.gnome.desktop.wm.keybindings move-to-side-w "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-corner-nw "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-10 "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-6 "['<Shift><Super>y']"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-right "['<Control><Shift><Alt>Right']"
    gsettings set org.gnome.desktop.wm.keybindings always-on-top "@as []"
    gsettings set org.gnome.desktop.wm.keybindings toggle-maximized "['<Super>m']"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-left "['<Control><Shift><Alt>Left']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-8 "['<Super>i']"
    gsettings set org.gnome.desktop.wm.keybindings cycle-panels "['<Control><Alt>Escape']"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-11 "@as []"
    gsettings set org.gnome.desktop.wm.keybindings lower "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-7 "['<Shift><Super>u']"
    gsettings set org.gnome.desktop.wm.keybindings toggle-above "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-down "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-panels "['<Control><Alt>Tab']"
    gsettings set org.gnome.desktop.wm.keybindings minimize "@as []"
    gsettings set org.gnome.desktop.wm.keybindings cycle-windows "['<Super>l', '<Super>h']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-9 "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-12 "@as []"
    gsettings set org.gnome.desktop.wm.keybindings toggle-on-all-workspaces "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-input-source "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-8 "['<Shift><Super>i']"
    gsettings set org.gnome.desktop.wm.keybindings move-to-side-n "@as []"
    gsettings set org.gnome.desktop.wm.keybindings maximize-horizontally "@as []"
    gsettings set org.gnome.desktop.wm.keybindings activate-window-menu "@as []"
    gsettings set org.gnome.desktop.wm.keybindings set-spew-mark "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-windows-backward "@as []"
    gsettings set org.gnome.desktop.wm.keybindings maximize-vertically "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-corner-sw "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-9 "@as []"
    gsettings set org.gnome.desktop.wm.keybindings maximize "['<Super>Up']"
    gsettings set org.gnome.desktop.wm.keybindings panel-main-menu "['<Alt>F1']"
    gsettings set org.gnome.desktop.wm.keybindings close "['<Super>c']"
    gsettings set org.gnome.desktop.wm.keybindings move-to-monitor-up "@as []"
    gsettings set org.gnome.desktop.wm.keybindings raise-or-lower "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-side-e "@as []"
    gsettings set org.gnome.desktop.wm.keybindings cycle-windows-backward "['<Shift><Super>l']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-1 "['<Super>q']"
    gsettings set org.gnome.desktop.wm.keybindings move-to-monitor-right "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-windows "@as []"
    gsettings set org.gnome.desktop.wm.keybindings panel-run-dialog "['<Super>semicolon']"
    gsettings set org.gnome.desktop.wm.keybindings switch-panels-backward "['<Shift><Control><Alt>Tab']"
    gsettings set org.gnome.desktop.wm.keybindings unmaximize "['<Super>Down', '<Alt>F5']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-2 "['<Super>w']"
    gsettings set org.gnome.desktop.wm.keybindings switch-applications "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-last "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-1 "['<Shift><Super>q']"
    gsettings set org.gnome.desktop.wm.keybindings move-to-corner-ne "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-3 "['<Super>e']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-up "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-side-s "@as []"
    gsettings set org.gnome.desktop.wm.keybindings show-desktop "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-center "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-2 "['<Shift><Super>w']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-left "['<Control><Alt>Left']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-right "['<Control><Alt>Right']"
    gsettings set org.gnome.desktop.wm.keybindings raise "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-corner-se "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-10 "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-4 "['<Super>r']"
    gsettings set org.gnome.desktop.wm.keybindings toggle-shaded "@as []"
    gsettings set org.gnome.desktop.wm.keybindings cycle-group-backward "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-3 "['<Shift><Super>e']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-down "@as []"
    gsettings set org.gnome.desktop.wm.keybindings cycle-panels-backward "['<Shift><Control><Alt>Escape']"
    gsettings set org.gnome.desktop.wm.keybindings move-to-monitor-left "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-applications-backward "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-11 "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-input-source-backward "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-5 "['<Super>t']"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-4 "['<Shift><Super>r']"
    gsettings set org.gnome.desktop.wm.keybindings move-to-monitor-down "@as []"
    gsettings set org.gnome.desktop.wm.keybindings toggle-fullscreen "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-6 "['<Super>y']"
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-12 "@as []"
    gsettings set org.gnome.desktop.wm.keybindings cycle-group "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-up "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-last "@as []"
    gsettings set org.gnome.desktop.wm.keybindings switch-group-backward "@as []"
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-5 "['<Shift><Super>t']"
    #+end_example

** =gnome-terminal=

*** Themes
    #+NAME: gnome-terminal-themes.dconf
    #+BEGIN_SRC sh :results output :exports results
      # Restore with `dconf load gnome-terminal-themes.dconf`
      dconf dump /org/gnome/terminal/
    #+END_SRC

    #+RESULTS: gnome-terminal-themes.dconf
    #+begin_example
    [legacy]
    default-show-menubar=false
    headerbar=@mb false

    [legacy/profiles:/:b1dcc9dd-5262-4d8d-a863-c897e6d979b9]
    background-color='rgb(0,43,54)'
    font='Source Code Pro 14'
    foreground-color='rgb(131,148,150)'
    palette=['rgb(7,54,66)', 'rgb(220,50,47)', 'rgb(133,153,0)', 'rgb(181,137,0)', 'rgb(38,139,210)', 'rgb(211,54,130)', 'rgb(42,161,152)', 'rgb(238,232,213)', 'rgb(0,43,54)', 'rgb(203,75,22)', 'rgb(88,110,117)', 'rgb(101,123,131)', 'rgb(131,148,150)', 'rgb(108,113,196)', 'rgb(147,161,161)', 'rgb(253,246,227)']
    scrollback-lines=100000
    scrollbar-policy='never'
    use-system-font=false
    use-theme-colors=false
    visible-name='Dark Home'
    #+end_example

*** =gtk.css=
    By default, =gnome-terminal= displays an obscenely tall header bar which I like to disable.

    The following CSS file does just that, as well as shrinking the header bar of Gnome applications generally.

    #+name: gtk.css
    #+BEGIN_SRC css :tangle "~/.config/gtk-3.0/gtk.css"
      VteTerminal,
      TerminalScreen,
      vte-terminal {
        /* XXX: Don't attempt to change this to padding: 5px 0 5px 5px */
        padding-bottom: 0px;
        padding-top: 5px;
        padding-left: 5px;
        padding-right: 5px;
      }

      /* shrink headerbars */
      headerbar {
        min-height: 0px;
        padding-left: 0px; /* same as childrens vertical margins for nicer proportions */
        padding-right: 0px;
      }

      headerbar entry,
      headerbar spinbutton,
      headerbar button,
      headerbar separator {
        margin-top: 0px; /* same as headerbar side padding for nicer proportions */
        margin-bottom: 0px;
      }

      /* shrink ssd titlebars */
      .default-decoration {
        min-height: 0; /* let the entry and button drive the titlebar size */
        padding: 0px;
      }

      .default-decoration .titlebutton {
        min-height: 0px; /* tweak these two props to reduce button size */
        min-width: 0px;
      }

      window.ssd headerbar.titlebar,
      window.ssd headerbar.titlebar button.titlebutton
      {
        padding-top: 0px;
        padding-bottom: 0px;
        min-height: 0;
      }
    #+END_SRC

** NetworkManager
   NetworkManager is a program for providing detection and configuration for systems to automatically connect to network.

   I use a local resolver (=dnsmasq=) instead of those provided by DHCP.

*** Enable =dnsmasq=
**** =NetworkManager.conf=
     You must ensure NetworkManager globally enables local resolver =dnsmasq=

     #+NAME: 70-use-dnsmasq.conf
     #+BEGIN_SRC conf :tangle "/sudo::/etc/NetworkManager/conf.d/70-use-dnsmasq.conf"
       [main]
       dns=dnsmasq
     #+END_SRC

**** =dnsmasq.conf=
     This will tack on these servers to the list recieved by DHCP.
     #+NAME: server.conf
     #+BEGIN_SRC conf :tangle "/sudo::/etc/NetworkManager/dnsmasq.d/server.conf"
       server=2606:4700:4700::1111
       server=1.1.1.1
       server=2001:4860:4860::8888
       server=8.8.8.8
     #+END_SRC

** Backup
   #+NAME: backup
   [[file:backup/README.org]]
