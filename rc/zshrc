#!/usr/bin/zsh
# -*- mode: shell-script; sh-shell: zsh; fill-column: 75; comment-column: 50; coding: utf-8 -*-
# This is zv's ZSHRC.

# ━━ Initialization ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
unsetopt ALL_EXPORT       # Absolutely do not automatically export defined params

# ── Job Control ────────────────────────────────────────────
setopt AUTO_RESUME        # Attempt to resume existing job before creating a new process.
setopt LONG_LIST_JOBS     # List jobs in the long format by default.
setopt NOTIFY             # Report status of background jobs immediately.
setopt BG_NICE            # run all background jobs at a lower priority.
unsetopt CHECK_JOBS       # don't report on jobs when shell exit.
setopt HUP                # kill jobs on shell exit.

# ━━ Aliasing ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
alias pr="print -l"
alias _='sudo'
alias e="emacsclient -t"
alias ec="emacsclient -c"
alias edit="emacs -nw"
alias info="info --vi-keys"
alias external-ip="curl ipinfo.io/ip"
alias l='ls -1A'         # Lists in one column, hidden files.
alias ll='ls -lh'        # Lists human readable sizes.
alias la='ll -Ah'         # Lists human readable sizes, hidden files.
alias w3m="noglob w3m"

# Tmux
alias ta="tmux attach-session -t"
alias tl="tmux list-sessions"

alias gpginit="date | gpg -a --encrypt -r zv@nxvr.org | gpg --decrypt"
alias veactivate="source .venv/bin/activate && rehash"

_exists() { (( $+commands[$1] == 1 )) }

# Open a vim tab for each file matching the pattern specified
rage() {
    vim +'/\v'"$1" +':silent tabdo :1 | normal! n' +':tabfirst' -p $(${commands[rg]-$commands[grep]} "$@" | cut -d: -f1 | sort -u)
}

man() {
    LESS_TERMCAP_md="$(print -P "%B")" \
                   LESS_TERMCAP_md="$(print -P "%B")" \
                   LESS_TERMCAP_md="$(print -P "%B")" \
                   LESS_TERMCAP_me=$'\E[0m' \
                   LESS_TERMCAP_so="$(print -P "%S%F{black}%K{white}")" \
                   LESS_TERMCAP_se=$'\E[0m' \
                   LESS_TERMCAP_us="$(print -P "%U%F{cyan}")" \
                   LESS_TERMCAP_ue=$'\E[0m' \
                   GROFF_NO_SGR=1 \
                   command man "$@"
}

# Use vim as a pager for man
manvi() {
    MANPAGER="/bin/sh -c \"sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' \
              | vim -c 'set ft=man nomod nolist norelativenumber nonu noma showtabline=0 shortmess+=T' \
                    -c 'nnoremap <silent> d <C-d>' \
                    -c 'nnoremap <silent> u <C-u>' -\"" \
            command man "$@"
}

# Moves the last created file to $2
mvlast() {
    local last_file=("$1"/*(.oc[1]))
    mv "$last_file" "$2" && print "$last_file"
}

mvdlhere() { mvlast ~/Downloads/ "$(pwd)" }

# # mkdir & cd to it
mcd() { mkdir -p "$1" && cd "$1"; }

# ── DNF Aliases ────────────────────────────────────────────
alias dnfs="dnf search"                       # search package
alias dnfp="dnf info"                         # show package info
alias dnfl="dnf list"                         # list packages
alias dnfcu="dnf check-update"                # check updates
alias dnfh="sudo dnf history"                 # get dnf history
alias dnfu="sudo dnf upgrade"                 # upgrade packages
alias dnfi="sudo dnf install"                 # install package
alias dnfr="sudo dnf remove"                  # remove package
alias dnfgr="sudo dnf groupremove"            # remove pagage group
alias dnfrl="sudo dnf remove --remove-leaves" # remove package and leaves
alias dnfc="sudo dnf clean all"               # clean cachefi

# ── Git Aliases ────────────────────────────────────────────
if _exists git; then
    alias g='git'
    alias gst='git status'
    alias gl='git pull'
    alias gc='git commit -v'
    alias gca='git commit -v -a'
    alias gco='git checkout'
    alias gcm='git checkout master'
    alias ga='git add'
    alias gfa='git fetch --all'

    gpro() {
        local full_branch="$(git symbolic-ref HEAD)"
        local branch="${full_branch##ref/heads/}"
        git pull --rebase origin "$branch"
    }

    alias git-userlinecount="git ls-files | xargs -n1 -d'\n' -i git blame {} | perl -n -e '/\s\((.*?)\s[0-9]{4}/ && print \"$1\n\"' | sort -f | uniq -c -w3 | sort -r"

    # Lists all files that have been ignored with git update-index
    alias git-ignorelog='git ls-files -v | grep "^h"'

    # Displays some git related author statistics
    function authorstats {
        gitauth="$1";
        git log --author="$gitauth" --pretty=tformat: --numstat | \
            gawk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf "added lines: %s removed lines : %s total lines: %s",add,subs,loc }' -
        echo ''
    }
fi

alias aws="MANPAGER='more' aws"
alias genp=" command genp"

# Format a series of hex into a C-like hex string
# e.g format_c_hex 9f909090afcb80 => \x9f\x90\x90\x90\xaf\xcb\x80
function format_c_hex {
    echo -e "$@" | sed 's/\(.\{2\}\)/\\x\1/g'
}

# ━━ Expansion and Globbing ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
setopt BAD_PATTERN          # Print error if filename glob pat. is badly formed
setopt BARE_GLOB_QUAL       # Treat trailing parens as qualifier list.
setopt GLOB_STAR_SHORT      # Abbreviate `**/*` to `**` and `***/*` to `***`
unsetopt GLOB_DOTS          # Glob files beginning with dot (`.`)
setopt NULL_GLOB            # Delete patterns without match from argument list
setopt BRACE_CCL            # Allow brace character class list expansion.
setopt EXTENDED_GLOB        # Use extended globbing syntax.

# ── Directories ────────────────────────────────────────────
setopt PUSHD_TO_HOME        # Push to home directory when no argument is given.
setopt AUTO_CD              # Auto changes to a directory without typing cd.
setopt AUTO_NAME_DIRS       # Auto add variable-stored paths to ~ list.
setopt AUTO_PUSHD           # Push the old directory onto the stack on cd.
setopt CDABLE_VARS          # Change directory to a path stored in a variable.
setopt PUSHD_IGNORE_DUPS    # Do not store duplicates in the stack.
setopt RC_EXPAND_PARAM      # xx=(a b c) && echo 'foo${xx}bar' -> fooabar, foobbar, foocbar instead of the default fooa b cbar
unsetopt PUSHD_SILENT       # Do not print the directory stack after pushd or popd.

# ── Scripts and Functions ──────────────────────────────────
if [[ "$TERMINAL_EMULATOR" = "JetBrains-JediTerm" ]]; then
    # Suppress the undeclared global variable warning raised inside IDEA
    typeset -g VARIABLE NAME
fi
setopt WARN_CREATE_GLOBAL   # Print a warning when global parmeter is created within a fun

unsetopt C_BASES            # Dont output hex numbers in 0xFF instead of 16#FF
setopt MULTIOS              # Write to multiple descriptors.

# ── Shell Emulation ────────────────────────────────────────
unsetopt APPEND_CREATE        # Don't warn if `>>` is used on a file that doesn't exist

# ── History ────────────────────────────────────────────────
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt HIST_BEEP                 # Beep when accessing non-existent history.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_REDUCE_BLANKS        # Remove extraneous blanks from history entries
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_FCNTL_LOCK           # Don't bother with old-school locking. We're on new POSIX here.

# History
export HISTFILE=~/.zsh_history

# Lines to store
export HISTSIZE=65535
export SAVEHIST=65535

# Lists the ten most used commands.
alias history-stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"

# ─ Input/ Output ───────────────────────────────────────────
# setopt RC_QUOTES          # Allow 'Zephyr''s Rad Pad' instead of 'Zephyrs'\''s Rad Pad'.
unsetopt CORRECT            # Don't correct the spelling of commands
unsetopt CORRECT_ALL        # Don't correct any arguments
unsetopt CLOBBER            # Do not overwrite existing files with > and >>. Use >! and >>! to bypass.
unsetopt MAIL_WARNING       # Don't print a warning message if a mail file has been accessed.
setopt SHORT_LOOPS          # Allow short loops.
unsetopt INTERACTIVE_COMMENTS # Allow comments in interactive mode
setopt HASH_CMDS            # Note the location of a command before it's executed
setopt HASH_EXECUTABLES_ONLY # Check if we've got an executable before hashing it

# ── Prompting ──────────────────────────────────────────────
setopt PROMPT_SUBST # Setup the prompt with pretty colors

# If we're in a dumb terminal then dont play fancy pants with our prompt
if [[ "$TERM" == dumb ]]; then
    # Ensure we don't set preexec && precmd
    unsetopt ZLE
    unsetopt PROMPT_CR
    unsetopt PROMPT_SUBST
    return
elif [[ "$TERM" == eterm-color ]]; then
    # unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    PROMPT="[%y] %2~ $baseprompt "
    return
fi

export KEYTIMEOUT=2 # Immediately switch to vicmd/viinst

# shows a slightly different prompt for vicmd vs other ZLE command modes to let
# you know what you are dealing with.
autoload -Uz vcs_info
precmd () { vcs_info }

local -A _keymap_fg_indicator=([vicmd]=red [viopp]=yellow)
PROMPT='[%n@%m] %B%2~%b${vcs_info_msg_0_} %F{${_keymap_fg_indicator[$KEYMAP]:-default}}$%f '

# ── Modules and Completions ────────────────────────────────
# Load and initialize the completion system ignoring insecure directories with a
# cache time of 20 hours, so it should almost always regenerate the first time a
# shell is opened each day.
autoload -Uz compinit
_comp_files=(${ZDOTDIR:-$HOME}/.zcompdump(Nm-20))
if (( $#_comp_files )); then
    compinit -i -C
else
    compinit -i
fi
unset _comp_files

setopt ALWAYS_TO_END       # Move cursor to the end of a completed word.
setopt AUTO_LIST           # Automatically list choices on ambiguous completion.
setopt AUTO_PARAM_SLASH    # If completed parameter is a directory, add a trailing slash.
setopt COMPLETE_IN_WORD    # Complete from both ends of a word.
setopt PATH_DIRS           # Perform path search even on command names with slashes.
setopt GLOB_COMPLETE       # Do not insert all words resulting from expansion on <TAB>
# overridden by MENU_COMPLETE
# setopt AUTO_MENU           # Show completion menu on a succesive tab press.
setopt MENU_COMPLETE       # Autoselect the first completion entry.

# Experimental
# not really a completion option
unsetopt FLOW_CONTROL      # Disable start/stop characters in shell editor.

setopt AUTO_PARAM_KEYS      # Params should complete unusual symbols correctly.
unsetopt REC_EXACT          # Don' override completions for current perfect matches.
setopt LIST_TYPES           # "Show the type of each file for possible completions"

# zstyle ':completion::*' insert-tab on
# Use caching to make completion for commands such as dpkg and apt usable.
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "${ZDOTDIR:-$HOME}/.zcompcache"

# Case-insensitive  partial-word and string completion
zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
setopt CASE_GLOB
## zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Version control info (vcs_info)
local base_vcs_style='%c%b%u%f'
zstyle ':vcs_info:*' enable git hg # svn # cvs fossil bzr
zstyle ':vcs_info:*' check-for-staged-changes true
zstyle ':vcs_info:*' actionformats "- [$base_vcs_style|%F{green}%a%f] "
zstyle ':vcs_info:*' stagedstr '%F{028}'
zstyle ':vcs_info:*' unstagedstr '*'
zstyle ':vcs_info:*' formats " [$base_vcs_style]"
zstyle ':vcs_info:git:*' branchformat '%b%F{1}:%F{3}%r'

# Group matches and describe.
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes

# Fuzzy match mistyped completions.
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only

# Increase the number of errors based on the length of the typed word.
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'

# Don't complete unavailable commands.
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

# Array completion element sorting.
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Directories
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*' squeeze-slashes true

# History
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

# Environmental Variables
zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}
zstyle ':completion:*:*:*:users' users 'zv' 'root' 'zephyr'

# Ignore multiple entries.
zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
zstyle ':completion:*:rm:*' file-patterns '*:all-files'

# ... unless we really want to.
zstyle '*' single-ignored show

# Kill
zstyle ':completion:*:*:*:*:processes' command 'ps -u $LOGNAME -o pid,user,command -w'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;36=0=01'
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:kill:*' force-list always
zstyle ':completion:*:*:kill:*' insert-ids single

# Man
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

# Media Players
zstyle ':completion:*:*:mpg123:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
zstyle ':completion:*:*:mpg321:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
zstyle ':completion:*:*:ogg123:*' file-patterns '*.(ogg|OGG|flac):ogg\ files *(-/):directories'
zstyle ':completion:*:*:mocp:*' file-patterns '*.(wav|WAV|mp3|MP3|ogg|OGG|flac):ogg\ files *(-/):directories'

# SSH/SCP/RSYNC
typeset -a _etc_host_ignores=('0.0.0.0' '127.0.0.1')
zstyle -e ':completion:*:hosts' hosts 'reply=(
  ${=${=${=${${(f)"$(cat {/etc/ssh/ssh_,~/.ssh/}known_hosts(|2)(N) 2> /dev/null)"}%%[#| ]*}//\]:[0-9]*/ }//,/ }//\[/ }
  ${=${(f)"$(cat /etc/hosts(|)(N) <<(echo))"}%%(\#${_etc_host_ignores:+|${(j:|:)~_etc_host_ignores}})*}
  ${=${${${${(@M)${(f)"$(cat ~/.ssh/config 2> /dev/null)"}:#Host *}#Host }:#*\**}:#*\?*}}
)'

zstyle ':completion:*:(scp|rsync):*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:(scp|rsync):*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:(scp|rsync):*' group-order users files all-files hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:ssh:*' group-order users
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost '0.0.0.<->'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^[-[:alnum:]]##(.[-[:alnum:]]##)##' '*@*' ''
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '0.0.0.<->' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'

# Tmux Pane Completion
autoload -Uz _tmux_pane_words
zle -C tmux-pane-words-prefix   complete-word _generic
zle -C tmux-pane-words-anywhere complete-word _generic
bindkey '^X^X' tmux-pane-words-prefix
bindkey '^X^T' tmux-pane-words-anywhere
zstyle ':completion:tmux-pane-words-(prefix|anywhere):*' completer _tmux_pane_words
zstyle ':completion:tmux-pane-words-(prefix|anywhere):*' ignore-line current
# display the (interactive) menu on first execution of the hotkey
zstyle ':completion:tmux-pane-words-(prefix|anywhere):*' menu yes select interactive
zstyle ':completion:tmux-pane-words-anywhere:*' matcher-list 'b:=* m:{A-Za-z}={a-zA-Z}'

# ls colors
autoload -U colors && colors;
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# Enable man completion when using Vim as a manpager
compdef '_dispatch man man' manvi

# ━━ ZLE / Line commands ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
setopt COMBINING_CHARS     # Combine zero-length punctuation characters
setopt NO_BEEP             # Stop the beep insanity
WORDCHARS='*?_-.[]~&;!#$%^(){}<>'

function zle-line-init zle-keymap-select {
    zle reset-prompt
}

function find-history-backwards {
    typeset -g __searching __savecursor

    if [[ $LBUFFER == *$'\n'* ]]; then
        zle .up-line-or-history
        __searching=''
    elif [[ -n $PREBUFFER ]] && zstyle -t ':zle:up-line-or-beginning-search' edit-buffer
    then
        zle .push-line-or-edit
    else
        [[ $LASTWIDGET = $__searching ]] && CURSOR=$__savecursor
        __savecursor=$CURSOR
        __searching=$WIDGET
        zle .history-beginning-search-backward
        zstyle -T ':zle:up-line-or-beginning-search' leave-cursor &&
            zle .end-of-line
    fi
}

zle -N find-history-backwards

function find-history-forwards {
    typeset -g __searching __savecursor
    if [[ ${+NUMERIC} -eq 0 &&
              ( $LASTWIDGET = $__searching || $RBUFFER != *$'\n'* ) ]]
    then
        [[ $LASTWIDGET = $__searching ]] && CURSOR=$__savecursor
        __searching=$WIDGET
        __savecursor=$CURSOR
        if zle .history-beginning-search-forward; then
            [[ $RBUFFER = *$'\n'* ]] || zstyle -T ':zle:down-line-or-beginning-search' leave-cursor && zle .end-of-line
            return
        fi
        [[ $RBUFFER = *$'\n'* ]] || return
    fi
    __searching=''
    zle .down-line-or-history
}
zle -N find-history-forwards


# ZSH line editor stuff needed for bindkey to work
zle -N zle-line-init
zle -N zle-keymap-select

autoload -U url-quote-magic
zle -N self-insert url-quote-magic

bindkey -M viins "^A" vi-beginning-of-line
bindkey -M viins "^E" vi-end-of-line
bindkey -M viins "^P" find-history-backwards
bindkey -M viins "^N" find-history-forwards

# Some convienent alt bindings
bindkey -M viins "\eh" vi-backward-blank-word
bindkey -M vicmd "\eh" vi-backward-blank-word
bindkey -M viins "\el" vi-forward-blank-word
bindkey -M vicmd "\el" vi-forward-blank-word

bindkey -M viins "\ed" delete-word
bindkey -M viins "^F" vi-cmd-mode

# Edit command in an external editor.
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd "v" edit-command-line

# History
bindkey "^R" history-incremental-pattern-search-backward
bindkey "^S" history-incremental-pattern-search-forward
bindkey -M vicmd "?" vi-history-search-forward
bindkey -M vicmd "/" vi-history-search-backward
bindkey -M vicmd "k" up-line-or-search   # up-line-or-history
bindkey -M vicmd "j" down-line-or-search # down-line-or-history

autoload smart-insert-last-word
zle -N smart-insert-last-word
# bind alt-p to cycle through the last argument of the previous line
bindkey -M viins '\ep' smart-insert-last-word

# EZKeys
# bindkey -s '\eu' "..\n"
# bindkey -s '\es' "$HOME/"
# bindkey -s '\e^p' "$HOME/Development/"

# make search up and down work, so partially type and hit up/down to find relevant stuff
bindkey '^[[A' find-history-backwards # up-line-or-search
bindkey '^[[B' find-history-forwards  # down-line-or-search
bindkey '^[[Z' reverse-menu-complete

# Make the delete key work instead of outputting a ~
bindkey '^?' backward-delete-char
bindkey "^[[3~" delete-char
bindkey "^[3;5~" delete-char
bindkey "\e[3~" delete-char

# Alt-Backspace deletes a word
bindkey -M viins "\e^?" backward-delete-word

bindkey ' ' magic-space # [Space] - do history expansion

# ━━ GPG Agent Setup ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
if _exists gpg; then
    export GPG_TTY=$(tty)

    unset SSH_AGENT_PID
    if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
        export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
    fi
fi

# ── Utility Control Variables ──────────────────────────────
export LESS='--ignore-case --long-prompt --chop-long-lines --RAW-CONTROL-CHARS --window=-4'

# Expanded `time' output
export TIMEFMT='%J %U user %S system %P cpu %*E total | %F mfault | %I/%O i/o | %Mk maxm | %w/%c ctx | %r %s'

# ━━ Other ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Configure Ocaml package manager
# [[ -x "/home/zv/.opam/opam-init/init.zsh" ]] && source /home/zv/.opam/opam-init/init.zsh > /dev/null 2> /dev/null

# cdpath=($cdpath)
# export N_PREFIX="$HOME/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"  # Added by n-install (see http://git.io/n-install-repo).

# The next line updates PATH for the Google Cloud SDK.
# [[ -e '/home/zv/extern/google-cloud-sdk/path.zsh.inc' ]] && source '/home/zv/extern/google-cloud-sdk/path.zsh.inc'

# The next line enables shell command completion for gcloud.
# [[ -e '/home/zv/extern/google-cloud-sdk/completion.zsh.inc' ]] && source '/home/zv/extern/google-cloud-sdk/completion.zsh.inc'

autoload +X -Uz pronounce_number
autoload +X -Uz spectrum_ls
autoload +X -Uz _zvcalc
alias calc='nocorrect noglob _zvcalc'

# Rust
if [[ (( $+commands[cargo] )) && -r ~/.cargo/env ]]; then
    source ~/.cargo/env
fi

# rg
if (( $+commands[rg] )); then
    export RIPGREP_CONFIG_PATH=~/.ripgreprc
fi

# if (( $+commands[rustc] )); then
#     export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
# fi

# Check if we own a readable file, not writable by other at ~/.zsh/local.zsh
if [[ -O ~/.zsh/local.zsh(#qf:go-w:N) ]]; then
    source ~/.zsh/local.zsh
elif [[ ! -e ~/.zsh/local.zsh ]]; then
    ( umask 077; touch ~/.zsh/local.zsh )
else
    printf "Refusing to source unsafe site configuration from %s\n" ~/.zsh/local.zsh >&2
fi
