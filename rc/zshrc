#!/usr/bin/env zsh
# This is zv's ZSHRC.

# ━━ Initialization ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
unsetopt ALL_EXPORT       # Absolutely do not automatically export defined params

# ── Job Control ────────────────────────────────────────────
setopt AUTO_RESUME        # Attempt to resume existing job before creating a new process.
setopt LONG_LIST_JOBS     # List jobs in the long format by default.
setopt NOTIFY             # Report status of background jobs immediately.
unsetopt BG_NICE          # Don't run all background jobs at a lower priority.
unsetopt CHECK_JOBS       # Don't report on jobs when shell exit.
unsetopt HUP              # Don't kill jobs on shell exit.

# ── Prompting ──────────────────────────────────────────────
setopt PROMPT_SUBST # Setup the prompt with pretty colors
typeset baseprompt='>>'
# If we're in a dumb terminal then dont play fancy pants with our prompt
	if [[ $TERM == 'dumb' ]]; then
		# Ensure we don't set preexec && precmd
		unsetopt ZLE
		unsetopt PROMPT_CR
		unsetopt PROMPT_SUBST
		PS1='$ '
		return
	elif [[ $TERM == 'eterm-color' ]]; then
		# unsetopt zle
		unsetopt prompt_cr
		unsetopt prompt_subst
		PROMPT="[%y] %2~ $baseprompt "
		return
	else
		export KEYTIMEOUT=2 # Immediately switch to vicmd/viinst
		# shows a slightly different prompt for vicmd vs other ZLE command modes to let
			# you know what you are dealing with.
			autoload -Uz vcs_info
			base_vcs_style='%c%b%u%f'
			zstyle ':vcs_info:*' enable git hg svn # cvs fossil bzr
			zstyle ':vcs_info:*' check-for-changes true
				zstyle ':vcs_info:*' actionformats "- [$base_vcs_style|%F{green}%a%f] "
				zstyle ':vcs_info:*' stagedstr '%F{028}'
				zstyle ':vcs_info:*' unstagedstr '*'
				zstyle ':vcs_info:*' formats " [$base_vcs_style]"
				zstyle ':vcs_info:git:*' branchformat '%b%F{1}:%F{3}%r'
				precmd () { vcs_info }

				zle_vim_prompt_notifier() {
					if [[ "$KEYMAP" == vicmd ]]; then
						print "%F{red}$baseprompt%f"
					else
						print "$baseprompt"
					fi
				}

			PROMPT='[%n@%m] %B%2~%b${vcs_info_msg_0_} `zle_vim_prompt_notifier` '
		fi


# ── Environment Variables ──────────────────────────────────
# Editors
export VISUAL='vim'

# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
#export LESS='-F -g -i -M -R -S -w -X -z-4'

# Set the Less input preprocessor.
# Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
if (( $#commands[(i)lesspipe(|.sh)] )); then
  export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
fi

# ━━ Aliasing ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Define general aliases.
alias pr="print -l"

alias _='sudo'
alias e="emacsclient -t"
alias ec="emacsclient -c"
alias edit="emacs -nw"
alias info="info --vi-keys"
alias jkl="jekyll serve -D"

# Tmux
alias ta="tmux attach-session -t"
alias tl="tmux list-sessions"

alias gpg=gpg2
alias xmm="xmodmap /home/zv/.xmodmaprc"

# Bullshit workaround to unlock my yubikey
alias gpginit="date | gpg -a --encrypt -r zv@nxvr.org | gpg --decrypt"

vman() {
    # Man
    MANPAGER="/bin/sh -c \"sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | vim -c 'set ft=man nomod nolist nonu noma showtabline=0 shortmess+=T' -\"" man $*
}

man() {
	local args="$@"
	(
		export LESS_TERMCAP_md=$(print -P "%B")
		export LESS_TERMCAP_md=$(print -P "%B")
		# export LESS_TERMCAP_md=$(print -P "%B")
		export LESS_TERMCAP_me=$'\E[0m'
		export LESS_TERMCAP_so=$(print -P "%S%F{black}%K{white}")
		export LESS_TERMCAP_se=$'\E[0m'
		export LESS_TERMCAP_us=$(print -P "%U%F{cyan}")
		export LESS_TERMCAP_ue=$'\E[0m'
		export GROFF_NO_SGR=1
		$(whence -a -p man) "$args"
	)
}

# Moves the last created file to $2
mvlast() {
    local last_file=($1/*(.oc[1]))
    mv $last_file $2 && print $last_file
}

mvdlhere() { mvlast "$HOME/Downloads/" $(pwd) }

# compile and run
crun() {
    zparseopts -E -D -- -gcc::=use_gcc \
               c:=custom_compiler \
               o+:=copts \
               Wl+:=lopts \
               -dump::=dump_asm \
               v::=verbose \
               h::=usage \
               g::=debug

    if [[ -n $usage ]]; then
				cat <<- EOF
				usage: crun [options]... <filename>

				  --clang     (default) use clang for C & C++ files
				  --gcc       use GCC for C & C++ files
				  --dump      dump assembly of program
				  -o          supply an option (e.g -o -Wall)
				  -v          verbose
				  -g          debug

				Compiles and runs a C, C++ or x86 Assembly file.
				EOF
        return 126
    fi

    # select unique entries of `copts` and then slice copts[2..] (copts[1]
    # contains the flag, e.g "-o")
    local file=${@[-1]}
    local options=${${(u)copts}[2,-1]}
    local exepath="$(mktemp)"

    if [[ $file =~ \.(cc|cpp|cxx)$ ]]; then
        local compiler="clang++"
        $compiler -std=c++1z -g -Wall -Weffc++ ${=options} $file -o $exepath
    elif [[ $file =~ \.c$ ]]; then
        local compiler="clang"
        [[ -n $use_gcc ]] && ccompiler="gcc"
        $compiler -g -Wall ${=options} $file -o $exepath
    elif [[ $file =~ \.(s|asm)$ ]]; then
        local objpath="$(mktemp)"
        nasm -felf64 $file -o $objpath && ld $objpath -o $exepath
    else
        echo "no filetype detected"
        return 126
    fi  || return $?

    if [[ -n $dump_asm ]]; then
        objdump -S -M intel -d $exepath
    else
        [[ -n $verbose ]] && echo "exepath: $exepath"
        if [[ -n $debug ]]; then
            gdb --args "$exepath" "$@"
        else
            "$exepath" "$@" & fg
        fi
    fi
}

# Removes the last created file in the specified directory, defaulting to the
# current directory.
rmlast() {
  [[ $# -eq 0 ]] && rm -i *(.oc[1]) || rm -i $1/*(.oc[1])
}

calc () {
    if [ $# -ne 0 ]; then
         local wrapped_args="\"$@\""
         emacsclient --eval "(calc-eval $wrapped_args)" | sed 's/^\"//' |  sed 's/\"$//'
    else
        emacsclient -t -c --eval "(full-calc)"
    fi
}
alias calc="noglob calc"

spectrum_ls() {
    string="${1-Test}"
    if [[ $1 == "block" ]]
    then
        string="███████████████████████████████"
    fi
    for code in {000..255}; do
        print -P -- "$code: %F{$code}${string}%f"
    done
}

# # mkdir & cd to it
mcd() { mkdir -p "$1" && cd "$1"; }

ptrsp() {
    (( !$+commands[xinput] )) && return;
    # Grep through for the actual ID. Hack.
    local prop_id="$(xinput list --short | \
        grep 'Lenovo.*pointer' | \
        awk 'BEGIN { FS="[\t]+" } ; {print $2}' | \
        sed 's/id\=//')"
   xinput --set-prop "$prop_id" 140 "$1" 0 0 0 "$1" 0 0 0 "$2"
}

pronounce_number() {
	integer number=$1
	let length=${#number}

	local -A numeric_names=(2   "Hundred"
	3   "Thousand"
	6   "Million"
	9   "Billion"
	12  "Trillion"
	15  "Quadrillion"
	18  "Quintillion"
	21  "Sextillion"
	24  "Septillion"
	27  "Octillion"
	30  "Nonillion"
	33  "Decillion"
	36  "Undecillion"
	39  "Duodecillion"
	42  "Tredecillion"
	45  "Quattuordecillion"
	48  "Quindecillion"
	51  "Sexdecillion"
	54  "Septendecillion"
	57  "Octodecillion"
	60  "Novemdecillion"
	63  "Vigintillion"
	303 "Centillion")

	local result
	local significand # our current exponent (hundreds, thousands, etc.)
	for i in {1..$((length - 1))}; do
		significand+=${number[i]};
		local number_name=${numeric_names[$((length - i))]}
		# if $number_name, insert our significand + radix name
			if [[ $number_name ]] {
				# but don't include "0" billions or "000 millions"
				if [[ ${significand:#0*} ]] {
					result+="${significand} ${number_name} "
				}
			# Reset our significander
			significand=""
		}
	done

	local tens=${number[-2, -1]##0#}
	[[ $tens ]] && result+="and ${tens}"

	echo $result
}

alias ls='ls --group-directories-first --color=auto'
alias l='ls -1A'         # Lists in one column, hidden files.
alias ll='ls -lh'        # Lists human readable sizes.
alias la='ll -A'         # Lists human readable sizes, hidden files.
alias grep="$aliases[grep] --color=auto"

# dnf
if (( $+commands[dnf] )); then
    alias dnfs="dnf search"                       # search package
    alias dnfp="dnf info"                         # show package info
    alias dnfl="dnf list"                         # list packages
    alias dnfcu="dnf check-update"                # check updates
    alias dnfh="sudo dnf history"                 # get dnf history
    alias dnfu="sudo dnf upgrade"                 # upgrade packages
    alias dnfi="sudo dnf install"                 # install package
    alias dnfr="sudo dnf remove"                  # remove package
    alias dnfgr="sudo dnf groupremove"            # remove pagage group
    alias dnfrl="sudo dnf remove --remove-leaves" # remove package and leaves
    alias dnfc="sudo dnf clean all"               # clean cachefi
fi

# Git
alias g='git'
alias gst='git status'
alias gl='git pull'
alias gc='git commit -v'
alias gca='git commit -v -a'
alias gco='git checkout'
alias gcm='git checkout master'
alias ga='git add'
alias chr="google-chrome"

alias git-userlinecount="git ls-files | xargs -n1 -d'\n' -i git blame {} | perl -n -e '/\s\((.*?)\s[0-9]{4}/ && print \"$1\n\"' | sort -f | uniq -c -w3 | sort -r"

# Lists all files that have been ignored with git update-index
alias git-ignorelog='git ls-files -v | grep "^h"'

# Displays some git related author statistics
function authorstats {
    gitauth="$1";
    git log --author="$gitauth" --pretty=tformat: --numstat | \
        gawk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf "added lines: %s removed lines : %s total lines: %s",add,subs,loc }' -
    echo ''
}

# Format a series of hex into a C-like hex string
# e.g format_c_hex 9f909090afcb80 => \x9f\x90\x90\x90\xaf\xcb\x80
function format_c_hex {
    echo "$@" | sed 's/\(.\{2\}\)/\\x\1/g'
}

# Disable correction.
for cmd (ack cd cp ebuild gcc gist grep heroku
        ln mkdir mv mysql rm nmcli ip ag man
        git npm ember dnf jekyll docker dnf) alias $cmd="nocorrect $cmd"


# ━━ Expansion and Globbing ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
setopt BAD_PATTERN          # Print error if filename glob pat. is badly formed
setopt EXTENDED_GLOB        # Use extended globbing syntax.
setopt BARE_GLOB_QUAL       # Treat trailing parens as qualifier list.
setopt GLOB_STAR_SHORT      # Abbreviate `**/*` to `**` and `***/*` to `***`
# setopt WARN_CREATE_GLOBAL  # Print a warning when global parmeter is created within a fun
setopt NULL_GLOB            # Delete patterns without match from argument list
setopt BRACE_CCL            # Allow brace character class list expansion.

# ── Directories ────────────────────────────────────────────
setopt PUSHD_TO_HOME        # Push to home directory when no argument is given.
setopt AUTO_CD              # Auto changes to a directory without typing cd.
setopt AUTO_NAME_DIRS       # Auto add variable-stored paths to ~ list.
setopt AUTO_PUSHD           # Push the old directory onto the stack on cd.
setopt CDABLE_VARS          # Change directory to a path stored in a variable.
setopt PUSHD_IGNORE_DUPS    # Do not store duplicates in the stack.
setopt RC_EXPAND_PARAM      # xx=(a b c) && echo 'foo${xx}bar' -> fooabar, foobbar, foocbar instead of the default fooa b cbar
unsetopt PUSHD_SILENT       # Do not print the directory stack after pushd or popd.

# ── Scripts and Functions ──────────────────────────────────
setopt C_BASES              # Output hex numbers in 0xFF instead of 16#FF
setopt MULTIOS              # Write to multiple descriptors.

# ── History ────────────────────────────────────────────────
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt HIST_BEEP                 # Beep when accessing non-existent history.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt HIST_VERIFY               # Do not execute immediately upon history expansion.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.

# History
export HISTFILE=$HOME/.zsh_history

# Lines to store
export HISTSIZE=$((2**16 - 1))
export SAVEHIST=$((2**16 - 1))

# Lists the ten most used commands.
alias history-stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"

# ─ Input/ Output ───────────────────────────────────────────
# setopt RC_QUOTES          # Allow 'Zephyr''s Rad Pad' instead of 'Zephyrs'\''s Rad Pad'.
unsetopt CORRECT            # Don't correct the spelling of commands
unsetopt CORRECT_ALL        # Don't correct any arguments
unsetopt CLOBBER            # Do not overwrite existing files with > and >>. Use >! and >>! to bypass.
# setopt INTERACTIVE_COMMENTS # Allow comments in interactive mode
unsetopt MAIL_WARNING       # Don't print a warning message if a mail file has been accessed.

# ── Modules and Completions ────────────────────────────────
# Load and initialize the completion system ignoring insecure directories with a
# cache time of 20 hours, so it should almost always regenerate the first time a
# shell is opened each day.
autoload -Uz compinit
_comp_files=(${ZDOTDIR:-$HOME}/.zcompdump(Nm-20))
if (( $#_comp_files )); then
  compinit -i -C
else
  compinit -i
fi
unset _comp_files

setopt ALWAYS_TO_END       # Move cursor to the end of a completed word.
setopt AUTO_LIST           # Automatically list choices on ambiguous completion.
setopt AUTO_PARAM_SLASH    # If completed parameter is a directory, add a trailing slash.
setopt COMPLETE_IN_WORD    # Complete from both ends of a word.
setopt PATH_DIRS           # Perform path search even on command names with slashes.
setopt GLOB_COMPLETE       # Do not insert all words resulting from expansion on <TAB>
# overridden by MENU_COMPLETE
# setopt AUTO_MENU           # Show completion menu on a succesive tab press.
setopt MENU_COMPLETE       # Do not autoselect the first completion entry.

# Experimental
# not really a completion option
unsetopt FLOW_CONTROL      # Disable start/stop characters in shell editor.

setopt AUTO_PARAM_KEYS     # Params should complete unusual symbols correctly.
unsetopt REC_EXACT # Don' override completions for current perfect matches.
setopt LIST_TYPES # "Show the type of each file for possible completions"

# zstyle ':completion::*' insert-tab on
# Use caching to make completion for commands such as dpkg and apt usable.
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "${ZDOTDIR:-$HOME}/.zcompcache"

# Case-insensitive  partial-word and string completion
zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
setopt CASE_GLOB
## zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
## unsetopt CASE_GLOB

# Group matches and describe.
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes

# Fuzzy match mistyped completions.
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only

# Increase the number of errors based on the length of the typed word.
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'

# Don't complete unavailable commands.
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

# Array completion element sorting.
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Directories
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*' squeeze-slashes true

# History
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

# Environmental Variables
zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}
zstyle ':completion:*:*:*:users' users 'zv' 'root' 'zephyr'

# Ignore multiple entries.
zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
zstyle ':completion:*:rm:*' file-patterns '*:all-files'

# ... unless we really want to.
zstyle '*' single-ignored show

# Kill
zstyle ':completion:*:*:*:*:processes' command 'ps -u $LOGNAME -o pid,user,command -w'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;36=0=01'
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:kill:*' force-list always
zstyle ':completion:*:*:kill:*' insert-ids single

# Man
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

# Media Players
zstyle ':completion:*:*:mpg123:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
zstyle ':completion:*:*:mpg321:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
zstyle ':completion:*:*:ogg123:*' file-patterns '*.(ogg|OGG|flac):ogg\ files *(-/):directories'
zstyle ':completion:*:*:mocp:*' file-patterns '*.(wav|WAV|mp3|MP3|ogg|OGG|flac):ogg\ files *(-/):directories'

# SSH/SCP/RSYNC
typeset -a _etc_host_ignores=('0.0.0.0' '127.0.0.1')
zstyle -e ':completion:*:hosts' hosts 'reply=(
  ${=${=${=${${(f)"$(cat {/etc/ssh/ssh_,~/.ssh/}known_hosts(|2)(N) 2> /dev/null)"}%%[#| ]*}//\]:[0-9]*/ }//,/ }//\[/ }
  ${=${(f)"$(cat /etc/hosts(|)(N) <<(echo))"}%%(\#${_etc_host_ignores:+|${(j:|:)~_etc_host_ignores}})*}
  ${=${${${${(@M)${(f)"$(cat ~/.ssh/config 2> /dev/null)"}:#Host *}#Host }:#*\**}:#*\?*}}
)'

zstyle ':completion:*:(scp|rsync):*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:(scp|rsync):*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:(scp|rsync):*' group-order users files all-files hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:ssh:*' group-order users 
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost '0.0.0.<->'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^[-[:alnum:]]##(.[-[:alnum:]]##)##' '*@*' ''
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '0.0.0.<->' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'

# Tmux Pane Completion
_tmux_pane_words() {
  local expl
  local -a w
  if [[ -z "$TMUX_PANE" ]]; then
    _message "not running inside tmux!"
    return 1
  fi
  # capture current pane first
  w=( ${(u)=$(tmux capture-pane -J -p)} )
  for i in $(tmux list-panes -F '#P'); do
    # skip current pane (handled above)
    [[ "$TMUX_PANE" = "$i" ]] && continue
    w+=( ${(u)=$(tmux capture-pane -J -p -t $i)} )
  done
  _wanted values expl 'words from current tmux pane' compadd -a w
}

zle -C tmux-pane-words-prefix   complete-word _generic
zle -C tmux-pane-words-anywhere complete-word _generic
bindkey '^X^X' tmux-pane-words-prefix
bindkey '^X^T' tmux-pane-words-anywhere
zstyle ':completion:tmux-pane-words-(prefix|anywhere):*' completer _tmux_pane_words
zstyle ':completion:tmux-pane-words-(prefix|anywhere):*' ignore-line current
# display the (interactive) menu on first execution of the hotkey
zstyle ':completion:tmux-pane-words-(prefix|anywhere):*' menu yes select interactive
zstyle ':completion:tmux-pane-words-anywhere:*' matcher-list 'b:=* m:{A-Za-z}={a-zA-Z}'

# ls colors
autoload -U colors && colors;

# The crazier the better!
(( $+commands[dircolors] )) && eval "$(dircolors --sh ~/.zsh/LS_COLORS)"

# ━━ ZLE / Line commands ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
setopt COMBINING_CHARS    # Combine zero-length punctuation characters
setopt NO_BEEP      # Stop the beep insanity
WORDCHARS='*?_-.[]~&;!#$%^(){}<>'

function zle-line-init zle-keymap-select {
  zle reset-prompt
}

function find-history-backwards {
    typeset -g __searching __savecursor

    if [[ $LBUFFER == *$'\n'* ]]; then
        zle .up-line-or-history
        __searching=''
    elif [[ -n $PREBUFFER ]] &&
             zstyle -t ':zle:up-line-or-beginning-search' edit-buffer
    then
        zle .push-line-or-edit
    else
        [[ $LASTWIDGET = $__searching ]] && CURSOR=$__savecursor
        __savecursor=$CURSOR
        __searching=$WIDGET
        zle .history-beginning-search-backward
        zstyle -T ':zle:up-line-or-beginning-search' leave-cursor &&
            zle .end-of-line
    fi
}
zle -N find-history-backwards

function find-history-forwards {
    typeset -g __searching __savecursor

    if [[ ${+NUMERIC} -eq 0 &&
              ( $LASTWIDGET = $__searching || $RBUFFER != *$'\n'* ) ]]
    then
        [[ $LASTWIDGET = $__searching ]] && CURSOR=$__savecursor
        __searching=$WIDGET
        __savecursor=$CURSOR
        if zle .history-beginning-search-forward; then
            [[ $RBUFFER = *$'\n'* ]] ||
	              zstyle -T ':zle:down-line-or-beginning-search' leave-cursor &&
	                  zle .end-of-line
            return
        fi
        [[ $RBUFFER = *$'\n'* ]] || return
    fi
    __searching=''
    zle .down-line-or-history
}
zle -N find-history-forwards


# ZSH line editor stuff needed for bindkey to work
zle -N zle-line-init
zle -N zle-keymap-select

autoload -U url-quote-magic
zle -N self-insert url-quote-magic

bindkey -M viins "^A" vi-beginning-of-line
bindkey -M viins "^E" vi-end-of-line
bindkey -M viins "^P" find-history-backwards
bindkey -M viins "^N" find-history-forwards

# Some convienent alt bindings
bindkey -M viins "\eh" vi-backward-blank-word
bindkey -M vicmd "\eh" vi-backward-blank-word
bindkey -M viins "\el" vi-forward-blank-word
bindkey -M vicmd "\el" vi-forward-blank-word

bindkey -M viins "\ed" delete-word
bindkey -M viins "^F" vi-cmd-mode

# Edit command in an external editor.
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd "v" edit-command-line

# History
bindkey "^R" history-incremental-pattern-search-backward
bindkey "^S" history-incremental-pattern-search-forward
bindkey -M vicmd "?" vi-history-search-forward
bindkey -M vicmd "/" vi-history-search-backward
bindkey -M vicmd "k" up-line-or-search   # up-line-or-history
bindkey -M vicmd "j" down-line-or-search # down-line-or-history

# EZKeys
bindkey -s '\eu' "..\n"
bindkey -s '\es' "git status\n"

# make search up and down work, so partially type and hit up/down to find relevant stuff
bindkey '^[[A' find-history-backwards # up-line-or-search
bindkey '^[[B' find-history-forwards  # down-line-or-search
bindkey ' ' magic-space    # also do history expansion on space
bindkey '^[[Z' reverse-menu-complete

# Make the delete key work instead of outputting a ~
bindkey '^?' backward-delete-char
bindkey "^[[3~" delete-char
bindkey "^[3;5~" delete-char
bindkey "\e[3~" delete-char

# Alt-Backspace deletes a word
bindkey -M viins "\e^?" backward-delete-word

# Insert the last argument
bindkey -M viins "\e0" insert-last-word

bindkey ' ' magic-space # [Space] - do history expansion

# ━━ GPG Agent Setup ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
gpg-connect-agent /bye
export SSH_AUTH_SOCK=$HOME/.gnupg/S.gpg-agent.ssh
export GPG_AGENT_INFO=$HOME/.gnupg/S.gpg-agent
#  Gnupg Agent Wrapper
# [[ -e "$HOME/.gnupg/gpg-agent-wrapper" ]] && source "$HOME/.gnupg/gpg-agent-wrapper"

# ━━ Other ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Run our external modules
if [[ -e ~/.zsh/modules ]]; then
  for fn (~/.zsh/modules/*.zsh) source $fn
fi

# Configure Ocaml package manager
# [[ -x "/home/zv/.opam/opam-init/init.zsh" ]] && source /home/zv/.opam/opam-init/init.zsh > /dev/null 2> /dev/null

# cdpath=($cdpath)
export N_PREFIX="$HOME/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"  # Added by n-install (see http://git.io/n-install-repo).

export RUST_SRC_PATH=/usr/local/src/rust/src

# Virtualenvwrapper
# [[ -x "/usr/bin/virtualenvwrapper.sh" ]] && source /usr/bin/virtualenvwrapper.sh

# The next line updates PATH for the Google Cloud SDK.
# [[ -e '/home/zv/extern/google-cloud-sdk/path.zsh.inc' ]] && source '/home/zv/extern/google-cloud-sdk/path.zsh.inc'

# The next line enables shell command completion for gcloud.
# [[ -e '/home/zv/extern/google-cloud-sdk/completion.zsh.inc' ]] && source '/home/zv/extern/google-cloud-sdk/completion.zsh.inc'

# source ~/.cargo/env

# if [[ -e "$HOME/.rbenv/bin" ]]; then
#     export PATH="$HOME/.rbenv/bin:$PATH"
#     eval "$(rbenv init -)"
# fi
