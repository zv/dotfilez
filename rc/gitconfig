[user]
	name       = zv
	email      = zephyr.pellerin@gmail.com
	editor     = vim
	signingkey = 0xF6F2D0445DC172F8

[github]
	user = zv

[core]
	editor = vim
	excludesfile = ~/.gitignore
	whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
	safecrlf = true
	autocrlf = input

[commit]
	verbose = true
	gpgsign = true

[gpg]
	program = gpg2

[color]
	pager       = true
	ui          = true

[grep]
	lineNumber = true
	threads = 4
	extendedRegex = true

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red
	new = green
	whitespace = red reverse

[color "status"]
	added     = green
	changed   = yellow
	untracked = red
	nobranch  = red reverse

[log]
	date = short

[apply]
	whitespace = nowarn

[diff]
	# Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
	# instead of a/b/c/d as prefixes for patches
	mnemonicprefix = true
	tool           = vimdiff

[difftool]
	prompt = false

[merge]
	summary = true
	verbosity = 1
	tool = vimdiff3

[mergetool "ediff"]
	cmd = "emacsclient -c -a \"\"  --eval \"(ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\")\""

[advice]
	statusHints = false

[push]
	default = current

[rebase]
	stat = true

[rerere]
	enabled = false

[alias]
	# add - record file contents to the index.
	a = add

	# branch - list, create, or delete branches.
	b = branch

	# commit - record changes to the repostiory.
	c = commit

	# log - show commit logs.
	l = log --date=format:\"%m/%d/%y\" --pretty=\"format:%C(auto)%<(8)%h%Creset| %C(blue)%ad%Creset | %C(013)%><(15,trunc)%aN%Creset |%C(auto)%d%Creset %s\" --abbrev-commit

	# pull - fetch from and merge with another repository or a local branch.
	p = pull

	# remote - manage set of tracked repositories.
	r = remote

	# status - show the working tree differences. (Expert users may prefer: status -sb)
	s = status

	# whatchanged - show logs with the differences introduced by each commit.
	w = whatchanged

	# add just the files in the local directory that are updated.
	au = add --update .

	# add by patch - looks at each change, and asks if we want to put it in the repo.
	ap = add --patch

	# branch - edit the description
	be = branch --edit-description

	# branch - list, create, or delete branches [same as "b"]
	br = branch

	# branch and only list branches whose tips are reachable from the specified commit (HEAD if not specified).
	brm = branch --merged

	# branch and only list branches whose tips are not reachable from the specified commit (HEAD if not specified).
	brnm = branch --no-merged

	# commit with a message
	cm = commit --message

	# checkout - update the working tree to match a branch or paths. [same as "o" for "out"]
	co = checkout

	# cherry-pick - apply the changes introduced by some existing commits; useful for moving small chunks of code between branches.
	cp = cherry-pick

	# cherry-pick without making a commit, and when when recording the commit, append a line that says "(cherry picked from commit ...)"
	cp-nx = cherry-pick --no-commit -x

	# diff - show changes between commits, commit and working tree, etc.
	d = diff

	# diff - show changes not yet staged
	dc = diff --cached

	# diff - changes about to be commited
	# diff - show changes but by word, not line
	dw = diff --word-diff

	# log with a text-based graphical representation of the commit history.
	lg = log --graph

	# log with one line per item.
	lo = log --oneline
	lol  = log --graph --decorate --pretty=oneline --abbrev-commit
	lola  = log --graph --decorate --pretty=oneline --abbrev-commit --all

	# log with patch generation.
	# show changes with log
	lp = log --patch

	# log with items appearing in topological order, i.e. descendant commits are shown before their parents.
	lt = log --topo-order

	# log key - our favorite way to show our key performance indicators, i.e. our most useful summary.
	lk = log --graph --topo-order --abbrev-commit --date=short --decorate --all --boundary --pretty=format:'%Cblue%ad %C(yellow)%h%Creset -%C(red)%d%Creset %s %C(013)[%cn]%Creset'

	# ls-files - show information about files in the index and the working tree; like Unix "ls" command.
	ls = ls-files

	# ls-ignored -  list files that git has ignored.
	ls-ignored = ls-files --others --i --exclude-standard

	# Decorate with branches
	ll = log --graph --oneline --decorate --branches --tags

	# Log changes
	changes = log --pretty=format:\"%C(yellow)%h%C(reset) %C(blue)%cr%Creset %C(013)%cn%Creset - %s\" --name-status

	# Shortlog
	short = log --pretty=format:'%C(yellow)%h%Creset - %<(80,trunc)%s %<(20) %cn %cr '
	changelog = log --pretty=format:\" * %s\"

	# merge but without autocommit, and with a commit even if the merge resolved as a fast-forward.
	me = merge --no-commit --no-ff

	# pull with rebase - to provide a cleaner, linear, bisectable history.
	pr = pull --rebase
	pro = !"git pull --rebase origin $(git symbolic-ref HEAD)"

	# Show our branches as a tree
	prtree  = log --graph --simplify-by-decoration --pretty=format:'%d' --all

	# rbi
	rbi = !"git rebase -i @{u}"

	# Copy format of ripgrep
	rg = "grep --heading --break -i"

	# reflog - reference log that manages when tips of branches are updated.
	rl = reflog

	# remote - manage set of tracked repositories [same as "r"].
	rr = remote

	# remote show - gives some information about the remote <name>.
	rrs = remote show

	# remote update - fetch updates for a named set of remotes in the repository as defined by remotes.
	rru = remote update

	# remote prune - deletes all stale remote-tracking branches under <name>.
	rrp = remote prune

	# revert - undo the changes from some existing commits
	rv = revert

	# revert without autocommit; useful when you're reverting more than one commits' effect to your index in a row.
	rvnc = revert --no-commit

	# show-branch - print a list of branches and their commits.
	sb = show-branch --date-order

	# submodule - enables foreign repositories to be embedded within a dedicated subdirectory of the source tree.
	sm = submodule

	# submodule with initialize, update, and recursive; this is useful to bring a submodule fully up to date.
	smu = submodule update --init --recursive

	# status - short summary instead of full details
	ss = status --short

	# status - show the working tree differences [same as "s"]
	st = status

	# ── Inspection Aliases ─────────────────────────────────────

	# Show our tags
	tags = tag -n1 -l

	# Diffs
	diff-changes = diff-names
	diff-stat = diff --stat -b -r
	diff-names = diff-stat
	diff-staged = diff --cached

	# Search git history for a filename
	locate-all = !"git log --all --pretty=oneline --full-history -- \"**/$@\""

	# ── Log Aliases ───────────────────────────────────────

	# Show log of new commits after you fetched, with stats, excluding merges
	log-fresh = log ORIG_HEAD.. --stat --no-merges

	# Show signatures
	log-signatures = log --pretty=format:\"%C(blue)%ad%  %C(yellow)%h%C(red)%d%Creset %s %C(013)%C(bold) %m %an [%G?] %GS %GK %Creset\"

	# Show log list with our preferred information, a.k.a. `ll`
	log-list = log --graph --topo-order --date=short --abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'

	# Show log  list with our preferred information with long formats, a.k.a. `lll`
	log-list-long = log --graph --topo-order --date=iso8601-strict --no-abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn <%ce>]%Creset %Cblue%G?%Creset'

	# Show log for my own commits by my own user email
	log-my = !git log --author $(git config user.email)

	# Show log as a graph
	log-graph = log --graph --all --oneline --decorate

	# Show the date of the first (a.k.a. earliest) commit, in strict ISO 8601 format
	log-date-first = !"git log --date-order --format=%cI | tail -1"

	# Show the date of the last (a.k.a. latest) commit, in strict ISO 8601 format
	log-date-last = log -1 --date-order --format=%cI

	# Show log with the recent hour, day, week, month, year
	log-1-hour  = log --since=1-hour-ago
	log-1-day   = log --since=1-day-ago
	log-1-week  = log --since=1-week-ago
	log-1-month = log --since=1-month-ago
	log-1-year  = log --since=1-year-ago

	# Show a specific format string and its number of log entries
	log-of-format-and-count = "!f() { format=\"$1\"; shift; git log $@ --format=oneline --format="$format" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \"%\"}}' | sort; }; f"
	log-of-count-and-format = "!f() { format=\"$1\"; shift; git log $@ --format=oneline --format="$format" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \"%\", i}}' | sort -nr; }; f"

	# Show the number of log entries by a specific format string and date format string
	log-of-format-and-count-with-date = "!f() { format=\"$1\"; shift; date_format=\"$1\"; shift; git log $@ --format=oneline --format=\"$format\" --date=format:\"$date_format\" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \"%\"}}' | sort -r; }; f"
	log-of-count-and-format-with-date = "!f() { format=\"$1\"; shift; date_format=\"$1\"; shift; git log $@ --format=oneline --format=\"$format\" --date=format:\"$date_format\" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \"%\", i}}' | sort -nr; }; f"

	# Show the number of log items by email
	log-of-email-and-count         = "!f() { git log-of-format-and-count \"%aE\" $@; }; f"
	log-of-count-and-email         = "!f() { git log-of-count-and-format \"%aE\" $@; }; f"

	# Show the number of log items by hour
	log-of-hour-and-count          = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m-%dT%H\" $@ ; }; f"
	log-of-count-and-hour          = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m-%dT%H\" $@ ; }; f"

	# Show the number of log items by day
	log-of-day-and-count           = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m-%d\" $@ ; }; f"
	log-of-count-and-day           = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m-%d\" $@ ; }; f"

	# Show the number of log items by week
	log-of-week-and-count          = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y#%V\" $@; }; f"
	log-of-count-and-week          = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y#%V\" $@; }; f"

	# Show the number of log items by month
	log-of-month-and-count         = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m\" $@ ; }; f"
	log-of-count-and-month         = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m\" $@ ; }; f"

	# Show the number of log items by year
	log-of-year-and-count          = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y\" $@ ; }; f"
	log-of-count-and-year          = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y\" $@ ; }; f"

	# Show the number of log items by hour of day
	log-of-hour-of-day-and-count   = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%H\" $@; }; f"
	log-of-count-and-hour-of-day   = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%H\" $@; }; f"

	# Show the number of log items by day of week
	log-of-day-of-week-and-count   = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%u\" $@; }; f"
	log-of-count-and-day-of-week   = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%u\" $@; }; f"

	# Show the number of log items by week of year
	log-of-week-of-year-and-count  = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%V\" $@; }; f"
	log-of-count-and-week-of-year  = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%V\" $@; }; f"

	# TODO
	log-refs = log --all --graph --decorate --oneline --simplify-by-decoration --no-merges
	log-timeline = log --format='%h %an %ar - %s'
	log-local = log --oneline origin..HEAD
	log-fetched = log --oneline HEAD..origin/main

	# chart: show a summary chart of activity per author.
	#
	# Example:
	#
	#     $ git chart
	#     ..X..........X...2..12 alice@example.com
	#     ....2..2..13.......... bob@example.com
	#     2.....1....11......... carol@example.com
	#     ..1............1..1... david@example.com
	#     ....1.......1.3.3.22.2 eve@example.com
	#
	# The chart rows are the authors.
	# TODO: sort the rows meaningfully,
	# such as alphabetically, or by count.
	#
	# The chart columns are the days.
	# The chart column prints one character per day.
	#
	#   * For 1-9 commits, show the number.
	#   * For 10 or more commits, show "X" as a visual indicator.
	#   * For no commits, show "." as a visual placeholder.
	#
	# The chart timeline adjusts the date range automatically:
	#
	#   * The timeline starts with the date of the earliest commit.
	#   * The timeline stops with the date of the latest commit.
	#   * The intent is to show the most relevant information.
	#
	# The chart default is to look at the past 6 weeks;
	# this gives a good balance of recency and speed
	# for a team that's currently working on a repo,
	# and also gives a good balance of fitting within
	# one terminal window 80 character width.
	#
	# You can adjust how far back the chart looks,
	# by providing your own `--since` parameter.
	# For example if you want to chart an older repo,
	# that does not have any recent commits, then you
	# you must provide a longer `--since` parameter.
	#
	chart = "!f() { \
	  git log \
	  --format=oneline \
	  --format=\"%aE %at\" \
	  --since=6-weeks-ago \
	  $* | \
	  awk ' \
	  function time_to_slot(t) { return strftime(\"%Y-%m-%d\", t, true) } \
	  function count_to_char(i) { return (i > 0) ? ((i < 10) ? i : \"X\") : \".\" } \
	  BEGIN { \
	    time_min = systime(); time_max = 0; \
	    SECONDS_PER_DAY=86400; \
	  } \
	  { \
	    item = $1; \
	    time = 0 + $2; \
	    if (time > time_max){ time_max = time } else if (time < time_min){ time_min = time }; \
	    slot = time_to_slot(time); \
	    items[item]++; \
	    slots[slot]++; \
	    views[item, slot]++; \
	  } \
	  END{ \
	    printf(\"Chart time range %s to %s.\\n\", time_to_slot(time_min), time_to_slot(time_max)); \
	    time_max_add = time_max += SECONDS_PER_DAY; \
	    for(item in items){ \
	      row = \"\"; \
	      for(time = time_min; time < time_max_add; time += SECONDS_PER_DAY) { \
	        slot = time_to_slot(time); \
	        count = views[item, slot]; \
	        row = row count_to_char(count); \
	      } \
	      print row, item; \
	    } \
	  }'; \
	}; f"

	# churn: show log of files that have many changes
	#
	# Show churn for specific directories:
	#
	#   $ git churn app lib
	#
	# Show churn for a time range:
	#
	#   $ git churn --since=1-month-ago
	#
	# These are all standard arguments to `git log`.
	#
	churn = !"f() { git log --all --find-copies --find-renames --name-only --format='format:' \"$@\" | awk 'NF{a[$0]++}END{for(i in a){print a[i], i}}' | sort -rn;};f"

	# summary: print a helpful summary of some typical metrics
	summary = "!f() { \
	  printf \"Summary of this branch...\n\"; \
	  printf \"%s\n\" $(git rev-parse --abbrev-ref HEAD); \
	  printf \"%s first commit timestamp\n\" $(git log --date-order --format=%cI | tail -1); \
	  printf \"%s last commit timestamp\n\" $(git log -1 --date-order --format=%cI); \
	  printf \"\nSummary of counts...\n\"; \
	  printf \"%d commit count\n\" $(git rev-list --count HEAD); \
	  printf \"%d date count\n\" $(git log --format=oneline --format=\"%ad\" --date=format:\"%Y-%m-%d\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}'); \
	  printf \"%d tag count\n\" $(git tag | wc -l); \
	  printf \"%d author count\n\" $(git log --format=oneline --format=\"%aE\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}'); \
	  printf \"%d committer count\n\" $(git log --format=oneline --format=\"%cE\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}'); \
	  printf \"%d local branch count\n\" $(git branch | grep -v \" -> \" | wc -l); \
	  printf \"%d remote branch count\n\" $(git branch -r | grep -v \" -> \" | wc -l); \
	  printf \"\nSummary of this directory...\n\"; \
	  printf \"%s\n\" $(pwd); \
	  printf \"%d file count via git ls-files\n\" $(git ls-files | wc -l); \
	  printf \"%d file count via find command\n\" $(find . | wc -l); \
	  printf \"%d disk usage\n\" $(du -s | awk '{print $1}'); \
	  printf \"\nMost-active authors, with commit count and %%...\n\"; git log-of-count-and-email | head -7; \
	  printf \"\nMost-active dates, with commit count and %%...\n\"; git log-of-count-and-day | head -7; \
	  printf \"\nMost-active files, with churn count\n\"; git churn | head -7; \
	}; f"

	# last-modified: show file's last modification date
	last-modified = !git log -M -C --name-only --format=':%ar <%ce>' | awk '/^:/ { meta=substr($0, 2) } /^[^:]/ && !found[$0] { printf(\"%-80s %s\\n\", $0, meta) } { found[$0] = 1 }'

	# ── Lookup aliases ────────────────────────────────────

	# whois: given a string for an author, try to figure out full name and email:
	whois = "!sh -c 'git log --regexp-ignore-case -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"

	# Given any git object, try to show it briefly
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

	# Show who contributed with summarized changes
	who = shortlog --summary --numbered --no-merges

	# Show who contributed, in descending order by number of commits
	whorank = shortlog -sn --no-merges

	# Stash snapshot - from http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	# This is handy for refactoring where you can’t quite fit what you’ve done
	# into a commit but daren’t stray too far from now without a backup.
	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

	# When you're a little worried that the world is coming to an end
	panic = !tar cvf ../git_panic.tar *

	# Undo commits.
	undo-commit        = reset --soft HEAD~1
	undo-commit-hard   = reset --hard HEAD~1
	undo-commit-hard-clean  = !git reset --hard HEAD~1 && git clean -fd
	undo-to-pristine   = !git reset --hard && git clean -ffdx
	undo-to-upstream   = !git reset --hard $(git upstream-branch)

	uncommit = reset --soft HEAD~1
	unadd = reset HEAD

	# Discard changes in a (list of) file(s) in working tree.
	discard = checkout --

	# Clean a working tree using more powerful options.
	cleaner = clean -dff

	# Clean a working tree using the most powerful options.
	cleanest = clean -dffx

	# Clean a working tree using typical options then checkout.
	cleanout = !git clean -df && git checkout -- .

	# Expunge a file everywhere; this command is typically for a serious problem,
	# such as accidentally committing a file of sensitive data, such as passwords.
	# After you use command, you will likely need to force push everything.
	# See <https://help.github.com/articles/removing-sensitive-data-from-a-repository/>
	expunge = !"f() { git filter-branch --force --index-filter \"git rm --cached --ignore-unmatch $1\" --prune-empty --tag-name-filter cat -- --all }; f"

	# Show logs of unreachable commits.
	# This can be useful, for example, when recovering contents of dropped stashes or reset commits.
	show-unreachable = !"git fsck --unreachable | grep commit | cut -d\" \" -f3 | xargs git log"

	# Ours & Theirs - Easy merging when you know which files you want
	#
	# Sometimes during a merge you want to take a file from one side wholesale.
	#
	# The following aliases expose the ours and theirs commands which let you
	# pick a file(s) from the current branch or the merged branch respectively.
	#
	#   * git ours - Checkout our version of a file and add it
	#
	#   * git theirs - Checkout their version of a file and add it
	#
	# N.b. the function is there as hack to get $@ doing
	# what you would expect it to as a shell user.

	# Checkout our version of a file and add it.
	ours   = !"f() { git checkout --ours   $@ && git add $@; }; f"

	# Checkout their version of a file and add it.
	theirs = !"f() { git checkout --theirs $@ && git add $@; }; f"

	# Assume: from http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	# Sometimes we want to change a file in a repo, but never check in your edits.
	# We can't use .gitignore because the file is tracked. We use update-index.
	assume   = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed  = !"git ls-files -v | grep ^h | cut -c 3-"

	# ── hew* aliases ──────────────────────────────────────

	# Delete all branches that have been merged into a commit
	hew = !git hew-local "$@" && git hew-remote "$@";

	# Delete all branches that have been merged into a commit (dry run)
	hew-dry-run = !git hew-local-dry-run "$@" && git hew-remote-dry-run "$@";

	# Delete all local branches that have been merged into a commit
	hew-local = !"f() { \
	    hew-local-dry-run \"$@\" | \
	    xargs git branch --delete ; \
	}; f \"$@\""

	# Delete all local branches that have been merged into a commit  (dry run)
	hew-local-dry-run = !"f() { \
	    commit=${1:-$(git current-branch)}; \
	    git branch --merged \"$commit\" | \
	    grep -v \"^[[:space:]]*\\*[[:space:]]*$commit$\" ; \
	}; f \"$@\""

	# Delete all remote branches that have been merged into a commit
	hew-remote = !"f() { \
	    hew-remote-dry-run \"$@\" | \
	    xargs -I% git push origin :% 2>&1 ; \
	}; f \"$@\""

	# Delete all remote branches that have been merged into a commit (dry run)
	hew-remote-dry-run = !"f() { \
	    commit=${1:-$(git upstream-branch)}; \
	    git branch --remotes --merged \"$commit\" | \
	    grep -v \"^[[:space:]]*origin/$commit$\" | \
	    sed 's#[[:space:]]*origin/##' ; \
	}; f \"$@\""

	# Delete all branches that have already been merged into the master branch.
	master-cleanse = !"git master-cleanse-local && git master-cleanse-remote"

	# Delete all local branches that have been merged into the local master branch.
	master-cleanse-local = !"git branch --merged master | grep  -v '\\*\\|master' | xargs -r -n 1 git branch -d"

	# Delete all remote branches that have been merged into the remote master branch.
	master-cleanse-remote = !"git checkout master && git branch -r --merged | grep -v master | sed 's/origin\\///' | xargs -n 1 git push --delete origin"

	# Publish the current branch by pushing it to the remote "origin",
	# and setting the current branch to track the upstream branch.
	publish = !"git push -u origin $(git branch-name)"

	# Unpublish the current branch by deleting the
	# remote version of the current branch.
	unpublish = !"git push origin :$(git branch-name)"

	# ── Shell scripting aliases ────────────────────────────────

	# Get the current branch name
	branch-name = !"git rev-parse --abbrev-ref HEAD"

	# Get the top level directory, regardless of what subdirectory we're in.
	root = ! pwd

	# Execute shell scripts. Git always runs scripts in the top directory.
	# For example "git exec pwd" will always show you the top directory.
	exec = ! exec

	# ── Maintenance aliases ────────────────────────────────────
	# pruner: prune everything that is unreachable now.
	# This command takes a long time to run, perhaps even overnight.
	pruner = !"git prune --expire=now; git reflog expire --expire-unreachable=now --rewrite --all"

	# repacker: repack a repo the way Linus recommends.
	repacker = repack -a -d -f --depth=300 --window=300 --window-memory=1g

	# Do everything we can to optimize the repository.
	optimizer = !"git pruner; git repacker; git prune-packed"

	# Find all objects that aren't referenced by any other object (orphans).
	orphans = fsck --full

	# ── Advanced aliases ───────────────────────────────────────
	# Search for a given string in all patches and print commit messages.
	#
	# Example: search for any commit that adds or removes string "foobar"
	#
	#     git search-commits foobar
	#
	# Example: search commits for string "foobar" in directory src/lib
	#
	#     git search-commits foobar src/lib
	#
	# Example: search commits for "foobar", print full diff of commit with 1 line context
	#
	#     git search-commits foobar --pickaxe-all -U1 src/lib
	#
	search-commits = !"f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""

	# git diff-chunk - Get the diff of one chunk.
	#
	# Suppose we want to see just the differences of one chunk,
	# such as one function, in one file, in two different commits.
	#
	# This alias creates two temp files which contain only the chunk,
	# then does a typical git diff.
	#
	# Syntax:
	#
	#     git diff-chunk <old-rev> <new-rev> <path> <chunk pattern>
	#
	diff-chunk = "!f() { \
	  git show \"$1:$3\" | sed -n \"/^[^ \t].*$4(/,/^}/p\" > .tmp1 ; \
	  git show \"$2:$3\" | sed -n \"/^[^ \t].*$4(/,/^}/p\" > .tmp2 ; \
	  git diff --no-index .tmp1 .tmp2 ; \
	}; f"

	# git remotes-prune - For each remote branch, prune it.
	# There's no way to tell `git remote update` to prune stale branches,
	# and `git remote prune` does not currently understand `--all`.
	# So this shell command iterates on each remote, and prunes it.
	remotes-prune = !git remote | xargs -n 1 git remote prune

	# Thanks to cody cutrer
	cherry-pick-merge = !"bash -c 'git cherry-pick -n -m 1 $0 && \
	      git log -1 --pretty=%P $0 | cut -b 42- > .git/MERGE_HEAD && \
	      git commit -v'"

	# Thanks to jtolds on stackoverflow
	remote-ref = !"bash -c ' \
	      local_ref=$(git symbolic-ref HEAD); \
	      local_name=${local_ref##refs/heads/}; \
	      remote=$(git config branch.\"#local_name\".remote || echo origin); \
	      remote_ref=$(git config branch.\"$local_name\".merge); \
	      remote_name=${remote_ref##refs/heads/}; \
	      echo remotes/$remote/$remote_name'"

	# Thanks to jtolds on stackoverflow
	rebase-recent = !git rebase -i $(git remote-ref)

	# Use graphviz for display.
	# This produces output that can be displayed using dotty, for example:
	#   $ git graphviz HEAD~100..HEAD~60 | dotty /dev/stdin
	#   $ git graphviz --first-parent master | dotty /dev/stdin
	graphviz = !"f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

	# show a list of every branch and show their latests commit, sorted by last commit
	branch-log = for-each-ref --sort=committerdate refs/heads --format='%(committerdate:iso) %(committerdate:relative)%09%(refname:short)'
	branch-log-remote = for-each-ref --sort=committerdate refs/remotes --format='%(committerdate:iso) %(committerdate:relative)%09%(refname:short)'

	# Show each branch, indicating how many commits ahead, behind each branch is.
	upstream-commits-diff = for-each-ref --sort=committerdate --format="%(refname:short) %(push:track)" ref/heads
[diff "sopsdiffer"]
	textconv = sops -d
