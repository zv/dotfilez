set nocompatible
if has('autocmd')
	filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
	syntax enable
endif

" ――――――――――――――― General Config ――――――――――――――――――――{{{
set autoread			" Reload files changed outside vim
set backspace=indent,eol,start	" Allow backspace in insert mode
set background=light		" a bright terminal
set browsedir=buffer		" Open Dialog should default to current buffer
" set columns=80			" Set column width at 80
set directory-=.		" No .swp/swo etc. in `cwd`
set encoding=utf-8		" Yes, really
set gcr=a:blinkon0		" Disable cursor blink
set hidden			" Hidden Buffers
set history=1000		" Store lots of :cmdline history
set lazyredraw			" Lazy is as lazy does!
set laststatus=2		" show recent status info
set nolist			" show trailing whitespace
set nrformats-=octal
set number			" Line numbers are good:
set pastetoggle=<F2>		" when in insert mode, press <F2> to go to paste mode
set relativenumber		" Relative line numbers
set ruler			" but where you are is better
set selection=old		" Stop that annoying thing where vim selects the next line
set shortmess=aIoO		" Show short messages, no intro.
set showcmd			" Show incomplete cmds down the bottom
set showmode			" Show current mode down the bottom
set spelllang=en_us		" check my spelling
set synmaxcol=511		" dont apply syntax coloring after the 512th column
set ttimeout
set ttimeoutlen=100
set visualbell			" No sounds
set switchbuf=useopen		" reveal already opened files from the
" quickfix window instead of opening new
" buffers

" set our font to terminus
if has('gui_running')
	set guifont=Source\ Code\ Pro\ 14
	set guioptions-=T
	set guioptions-=m
endif

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
	set t_Co=16
endif

colorscheme desert
"}}}

" ―――――――――――― Search Settings ――――――――――――――――――――――{{{
"
set incsearch		"Find the next match as we type the search
set hlsearch		"Hilight searches by default
set viminfo='100,f1  	"Save up to 100 marks, enable capital marks
set smartcase		"Smart Case Search
set ignorecase		"Ignore Case
"}}}

" ――――――━―――――― Swap & Persistent Undo ―――――――――――――――{{{
set undofile
set backup
set noswapfile

if has('win32') || has('win64')
	let s:appdata=$LOCALAPPDATA . '/vim/'
elseif has('win32unix') " cygwin's vim
	let s:appdata="/tmp/vim"
else
	if empty($XDG_CACHE_HOME)
		let $XDG_CACHE_HOME = '~/.cache'
	endif
	let s:appdata=$XDG_CACHE_HOME . '/vim/'
endif

let &backupdir=(s:appdata . 'backup')
let &directory=(s:appdata . 'swap')
let &undodir=(s:appdata . 'undo')
let &backupskip=(&backupdir)

" Create those folders if they don't exist
for s:vddir in [&undodir, &backupdir, &directory]
	silent! call mkdir(expand(s:vddir), "p")
endfor
"}}}

" ――――――――――――――――――  Ctags  ――――――――――――――――――――――――{{{
if has('path_extra')
	setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif
"}}}

" ―――――――――――――――― Indentation ――――――――――――――――――――――{{{
set autoindent		" copy previous line's indent
set preserveindent 	" preserve indent structure
set copyindent		" newline copies existing line structure
set list
set nowrap		" Don't wrap lines
set linebreak		" Wrap lines at convenient points

" set tabstop=8		" actual tabs occupy 8 characters
" set softtabstop=8	" insert mode tab and backspace use 8 spaces
" set shiftwidth=4

" set cindent		" start c lang indent mode
" set expandtab		" insert tabs as spaces
" set smartindent	" intdent intelligently
" set smarttab		" tab inserts tab when already tabbed!

set listchars=tab:»·,trail:·
"}}}

" ―――――――――――――――― Keybindings ――――――――――――――――――――――{{{
let mapleader=" "

" manipulate windows spacemacs-style
nnoremap <silent> <leader>wh <C-w>h
nnoremap <silent> <leader>wl <C-w>l
nnoremap <silent> <leader>wk <C-w>k
nnoremap <silent> <leader>wj <C-w>j

" Create window splits easier.
nnoremap <silent> <leader>wv <C-w>v
nnoremap <silent> <leader>ws <C-w>s

" basic spacemacs compatibility bindings
nnoremap <silent> <leader>sc :nohlsearch<CR>
nnoremap <silent> <leader>fs :w<CR>
nnoremap <leader>ft :cd %:p:h<cr>:Lexplore<cr>
nnoremap <leader>ad :cd %:p:h<cr>:Explore<cr>
nnoremap <silent> <leader>bb :buffers<CR>
nnoremap <silent> Q :q<CR>
nnoremap <silent> <leader>fed :e ~/.vimrc<CR>
nnoremap <silent> <leader>bp :bprevious<CR>
nnoremap <silent> <leader>bn :bnext<CR>
nnoremap <silent> <leader>tn :tabnext<CR>
nnoremap <silent> <leader>tp :tabprev<CR>
nnoremap <leader>ff :e<SPACE>
nnoremap <leader>tw :set nolist!<CR>
nnoremap <leader>tl :set nowrap!<CR>

" map [ => { and ] => }
augroup bracket_remap
	autocmd BufReadPost * :silent! unmap <buffer> []
	autocmd BufReadPost * :silent! unmap <buffer> ["
	autocmd BufReadPost * :silent! unmap <buffer> [[
	autocmd BufReadPost * :silent! unmap <buffer> ]]
	autocmd BufReadPost * :silent! unmap <buffer> ]"
	autocmd BufReadPost * :silent! unmap <buffer> ][
augroup end

nnoremap ] }
vnoremap ] }
nnoremap [ {
vnoremap [ {
nnoremap d[ d{
nnoremap d] d}

nnoremap <silent> <leader>xdw :let _s=@/ <Bar> :―s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" page manipulations
nnoremap <silent> <CR> <C-f>
nnoremap <silent> <Backspace> <C-b>

"}}}

" ―――――――――――――――― netrw config ―――――――――――――――――――――{{{
let g:netrw_banner=0 	" disable banner
let g:netrw_liststyle=3 " tree-style listing
let g:netrw_preview=1	" preview a document w/ 'p'
let g:netrw_winsize=25  " percentage for new win
" let g:netrw_altv=1	" open to right
"
" let g:netrw_browse_split = 4
"
" augroup ProjectDrawer
"   autocmd!
"   autocmd VimEnter * :Vexplore
" augroup END
" "}}}

" ―――――――――――――――― Folds ――――――――――――――――――――――――――――{{{
set foldenable		" dont fold by default
set foldmethod=marker   " fold based on indent
set foldnestmax=3	" deepest fold is 3 levels
"}}}

" ―――――――――――――――― Completion ―――――――――――――――――――――――{{{
" dont try to fetch includes
set complete-=i
set completeopt=longest,menuone
set pumheight=35

" Display candidate supplement.
set wildmenu
set wildmode=longest,list,full

" Can supplement a tag in a command-line.
set wildoptions=tagfile
"}}}

" ―――――――――――――――― Scrolling ――――――――――――――――――――――――{{{
set scrolloff=3		"Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1
"}}}

" vim:set ft=vim noet sw=8 ts=8 sts=0:
