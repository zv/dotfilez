set nocompatible
if has('autocmd')
	filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
	syntax enable
endif


" ---------------- General Config ---------------- {{{
" set autochdir                   " set the working directory to always be the currently opened file
set autoread                    " Reload files changed outside vim
set backspace=indent,eol,start  " Allow backspace in insert mode
set browsedir=buffer            " Open Dialog should default to current buffer
set directory-=.                " No .swp/swo etc. in `cwd`
set encoding=utf-8              " Yes, really
set gcr=a:blinkon0              " Disable cursor blink
set hidden                      " Hidden Buffers
set history=10000               " Store lots of :cmdline history
set laststatus=2                " show recent status info
set lazyredraw                  " Lazy is as lazy does!
set nolist                      " show trailing whitespace
set nrformats-=octal            " don't use octal in Ctrl-A & Ctrl-X
set number                      " Line numbers are good:
set pastetoggle=<SPACE>tp       " when in insert mode, press <F2> to go to paste mode
set relativenumber              " Relative line numbers
set ruler                       " but where you are is better
set scrolloff=3                 " How many lines should remain in scroll
set selection=old               " Stop that annoying thing where vim selects the next line
set shortmess=aIoO              " Show short messages, no intro.
set showcmd                     " Show incomplete cmds down the bottom
set showmode                    " Show current mode down the bottom
set sidescroll=1                " Characters to 'sidescroll' by
set sidescrolloff=15            " How many chars should remain in sidescrol
set spelllang=en_us             " check my spelling
set switchbuf=useopen           " reveal already opened files from the
set synmaxcol=511               " dont apply syntax coloring after the 512th column
set ttimeout                    " key combinations may timeout
set ttimeoutlen=50              " key combo timeout
set visualbell                  " no sounds

"}}}
" -------------------- Folds --------------------- {{{
set foldenable		" enable fold by default
set foldmethod=marker   " fold based on indent
set foldnestmax=3	" deepest fold is 3 levels

"}}}
" ------------------ Completion ------------------ {{{
" dont try to fetch includes
set complete-=.,w,b,u,t
set completeopt=menu,longest,menuone
set pumheight=10

set wildmenu
set wildmode=longest,full
set wildignorecase        " ignore case in wildmenu
set wildoptions=tagfile   " Can supplement a tag in a command-line.
set wildchar=<Tab>        " char to start expansion
set wildcharm=<C-Z>       " 'wildcharm' is 'wildchar' inside macros

"}}}
" --------------- Search Settings ---------------- {{{
set incsearch           "Find the next match as we type the search
set hlsearch            "Hilight searches by default
set viminfo='100,f1     "Save up to 100 marks, enable capital marks
set smartcase           "Smart Case Search
set ignorecase          "Ignore Case
set wildignore=*.so,*.swp,*.zip,*.class,*.jpg,*.ttf,*.TTF,*.png,*.tar.gz
"}}}
" ---------------- Indentation ------------------- {{{
set autoindent       " copy previous line's indent
set preserveindent   " preserve indent structure
set copyindent       " newline copies existing line structure
set list
set nowrap           " Don't wrap lines
set linebreak        " Wrap lines at convenient points
set backspace=2
set listchars=tab:»·,trail:·
set fillchars=vert:│,fold:·
set smarttab            " tab inserts tab when already tabbed!
set expandtab           " insert tabs as spaces
set smartindent         " indent intelligently
set tabstop=4           " number of spaces a tab counts for
set shiftwidth=4        " number of spaces to use for each step of (auto)indent
set softtabstop=4       " number of spaces a tab counts for in edit operations.

"}}}
" ------------ Swap & Persistent Undo ------------ {{{
set backup
if has('persistent_undo')
	set undofile
endif
set noswapfile

if has('win32') || has('win64')
	if empty($LOCALAPPDATA)
		let $LOCALAPPDATA=$APPDATA . "\\Local"
	endif
	for d in ["swap", "backup", "undo"]
		if !isdirectory($LOCALAPPDATA . "\\vim\\" . d)
			call mkdir($LOCALAPPDATA . "\\vim\\" . d, "p")
		endif
	endfor
	set directory=$LOCALAPPDATA\\vim\\swap,$TEMP,$TMP,.
	set backupdir=$LOCALAPPDATA\\vim\\backup,$TEMP,$TMP,.
	set undodir=$LOCALAPPDATA\\vim\\undo,$TEMP,$TMP,.
else
	if empty($XDG_CACHE_HOME)
		let $XDG_CACHE_HOME=$HOME . "/.cache"
	endif
	for d in ["swap", "backup", "undo"]
		if !isdirectory($XDG_CACHE_HOME . "/vim/". d)
			call mkdir($XDG_CACHE_HOME . "/vim/" . d, "p")
		endif
	endfor
	set directory=$XDG_CACHE_HOME/vim/swap,$HOME,$TMPDIR,.
	set backupdir=$XDG_CACHE_HOME/vim/backup,$HOME,$TMPDIR,.
	set undodir=$XDG_CACHE_HOME/vim/undo,$HOME,$TMPDIR,.
endif

"}}}
" -------------------  Ctags  -------------------- {{{
if has('path_extra')
	setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif
"}}}
" ----------------- Keybindings ------------------ {{{
let mapleader=" "

inoremap fd <ESC>

" manipulate windows spacemacs-style
nnoremap <silent> <leader>wh <C-w>h
nnoremap <silent> <leader>wl <C-w>l
nnoremap <silent> <leader>wk <C-w>k
nnoremap <silent> <leader>wj <C-w>j
nnoremap <silent> <leader>wH <C-w>H
nnoremap <silent> <leader>wL <C-w>L
nnoremap <silent> <leader>wK <C-w>K
nnoremap <silent> <leader>wJ <C-w>J

" Configure search
if executable("rg")
	set grepprg=rg\ --no-heading\ --vimgrep
	set grepformat=%f:%l:%c:%m
endif

command -nargs=+ -complete=file -bar WindowGrep silent! grep! <args>|cwindow|redraw!
nnoremap <leader>/ :WindowGrep<SPACE>
nnoremap <leader>* :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Create window splits easier.
nnoremap <silent> <leader>wv <C-w>v
nnoremap <silent> <leader>ws <C-w>s
" basic spacemacs compatibility bindings
nnoremap <silent> <leader>sc :nohlsearch<CR>
nnoremap <silent> <leader>fs :w<CR>
nnoremap <leader>ft :cd %:p:h<cr>:Lexplore<cr>
nnoremap <leader>ad :cd %:p:h<cr>:Explore<cr>
nnoremap <silent> Q :q<CR>
nnoremap <silent> <leader>fed :e ~/.vimrc<CR>

function! CreateScratchBuffer()
	new
	setfiletype text
	setlocal encoding=utf-8
	setlocal buftype=nofile
	setlocal bufhidden=hide
	setlocal noswapfile
	file scratch
endfunction
nnoremap <silent> <leader>bs :call CreateScratchBuffer()<CR>
nnoremap <silent> <leader>bc :bunload<CR>
nnoremap <silent> <leader>bd :bdelete<CR>
nnoremap <silent> <leader>bx :bdelete<CR>
nnoremap <silent> <leader>bp :bprevious<CR>
nnoremap <silent> <leader>bn :bnext<CR>
nnoremap <leader>bb :buffer<Space><C-Z>
nnoremap <silent> <leader>bl :tabedit %<CR>
nnoremap <silent> <leader>bw :set modifiable!<CR>

nnoremap <silent> <leader>lD :tabonly<CR>
nnoremap <silent> <leader>ld :tabclose<CR>
nnoremap <silent> <leader>ll :tabnew<CR>
nnoremap <silent> <leader>ln :tabnext<CR>
nnoremap <silent> <leader>lp :tabprev<CR>

nnoremap <leader>ff :e<SPACE>
nnoremap <leader>fr :browse oldfiles<CR>

nnoremap <leader>sp :set paste!<CR>

nnoremap <silent> <leader>xdw :%s/\s\+$//e<CR>

" Execute all VimL code highlighted.
au! FileType vim vnoremap <leader>er :@*<CR>

" page manipulations
nnoremap <silent> <CR> <C-f>
nnoremap <silent> <Backspace> <C-b>

nnoremap <silent><leader>tw :set nolist!<CR>
nmap <expr> <silent> <leader>tt ( &expandtab == 0 ? ":set\ expandtab\<CR>" : ":set\ noexpandtab\<CR>" )
nnoremap <silent><leader>tn :set number!<CR>
nnoremap <silent><leader>tr :set number!<CR>:set relativenumber!<CR>
nnoremap <silent><leader>tl :set wrap!<CR>

" Map popup-menu keys to use C-k, C-j & C-l
inoremap <expr> <C-j> pumvisible() ? '<Down>' : '<C-j>'
inoremap <expr> <C-k> pumvisible() ? '<Up>' : '<C-k>'
inoremap <expr> <C-l> pumvisible() ? '<CR>' : '<C-l>'


"}}}
" ----------------- NetRw Config ----------------- {{{
let g:netrw_banner=0	" disable banner
let g:netrw_liststyle=3 " tree-style listing
let g:netrw_keepdir=1 "  change the current directory
let g:netrw_preview=1	" preview a document w/ 'p'
let g:netrw_winsize=25  " percentage for new win
" }}}
" -------------------- Colors -------------------- {{{

" set our font to terminus
if has('gui_running')
	if !has('win32') || !has('win64')
		set guifont=Source\ Code\ Pro\ 10
	endif
	set guioptions+=Ped
	for opt in split('mMgtTrRlLb', '\Z')
		exec 'set guioptions-=' . opt
	endfor
endif

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
	set t_Co=16
endif

colorscheme desert
" }}}

" vim:set ft=vim noet sw=8 ts=8 sts=0:
