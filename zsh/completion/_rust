#compdef rustc

local -a _rustc_opts_switches _rustc_opts_lint _rustc_opts_debug

typeset -A opt_args

_rustc_opts_switches=(
    --ar'[Program to use for managing archives instead of the default.]'
    -c'[Compile and assemble, but do not link]'
    --cfg'[Configure the compilation environment]'
    --crate-id'[Output the crate id and exit]'
    --crate-file-name'[deprecated in favor of --print-file-name]'
    --crate-name'[Specify the name of the crate being built]'
    --crate-type'[Specify the type of crate to crate]'
    --debuginfo'[Emit DWARF debug info to the objects created: 0 = no debug info, 1 = line-tables only (for stacktraces and breakpoints), 2 = full debug info with variable and type information (same as -g)]'
    --dep-info'[Output dependency info to <filename> after compiling]'
    -g'[Equivalent to --debuginfo=2]'
    {-h,--help}'[Display this message]'
    -L'[Add a directory to the library search path]'
    --linker'[Program to use for linking instead of the default.]'
    --link-args'[FLAGS is a space-separated list of flags passed to the linker]'
    --llvm-args'[A list of arguments to pass to llvm, comma separated]'
    --ls'[List the symbols defined by a library crate]'
    --no-analysis'[Parse and expand the output, but run no analysis or produce output]'
    --no-rpath'[Disables setting the rpath in libs/exes]'
    --no-trans'[Run all passes except translation; no output]'
    -O'[Equivalent to --opt-level=2]'
    -o'[Write output to <filename>]'
    --opt-level'[Optimize with possible levels 0-3]'
    --out-dir'[Write output to compiler-chosen filename in <dir>]'
    --parse-only'[Parse only; do not compile, assemble, or link]'
    --passes'[Comma or space separated list of pass names to use]'
    --pretty'[Pretty-print the input instead of compiling]'
    --print-crate-name'[Output the crate name and exit]'
    --print-file-name'[Output the file(s) that would be written if compilation continued and exit]'
    --save-temps'[Write intermediate files (.bc, .opt.bc, .o) in addition to normal output]'
    --sysroot'[Override the system root]'
    --test'[Build a test harness]'
    --target'[Target triple cpu-manufacturer-kernel\[-os\] to compile]'
    --target-cpu'[Select target processor (llc -mcpu=help for details)]'
    --target-feature'[Target specific attributes (llc -mattr=help for details)]'
    --relocation-model'[Relocation model (llc --help for details)]'
    {-v,--version}'[Print version info and exit]'
)
_rustc_opts_lint=(
    'attribute-usage[detects bad use of attributes]'
    'ctypes[proper use of libc types in foreign modules]'
    'dead-assignment[detect assignments that will never be read]'
    'dead-code[detect piece of code that will never be used]'
    'default-type-param-usage[prevents explicitly setting a type parameter with a default]'
    'deprecated[detects use of #\[deprecated\] items]'
    'experimental[detects use of #\[experimental\] items]'
    'heap-memory[use of any (~ type or @ type) heap memory]'
    'managed-heap-memory[use of managed (@ type) heap memory]'
    'missing-doc[detects missing documentation for public members]'
    'non-camel-case-types[types, variants and traits should have camel case names]'
    'non-uppercase-pattern-statics[static constants in match patterns should be all caps]'
    'non-uppercase-statics[static constants should have uppercase identifiers]'
    'owned-heap-memory[use of owned (~ type) heap memory]'
    'path-statement[path statements with no effect]'
    'type-limits[comparisons made useless by limits of the types involved]'
    'type-overflow[literal out of range for its type]'
    'unknown-crate-type[unknown crate type found in #\[crate_type\] directive]'
    'unknown-features[unknown features found in crate-level #\[feature\] directives]'
    'unnecessary-allocation[detects unnecessary allocations that can be eliminated]'
    'unnecessary-parens[`if`, `match`, `while` and `return` do not need parentheses]'
    'unnecessary-qualification[detects unnecessarily qualified names]'
    'unnecessary-typecast[detects unnecessary type casts, that can be removed]'
    'unreachable-code[detects unreachable code]'
    'unrecognized-lint[unrecognized lint attribute]'
    'unsafe-block[usage of an `unsafe` block]'
    'unstable[detects use of #\[unstable\] items (incl. items with no stability attribute)]'
    'unused-imports[imports that are never used]'
    'unused-must-use[unused result of a type flagged as #\[must_use\]]'
    "unused-mut[detect mut variables which don't need to be mutable]"
    'unused-result[unused result of an expression in a statement]'
    'unused-unsafe[unnecessary use of an `unsafe` block]'
    'unused-variable[detect variables which are not used in any way]'
    'warnings[mass-change the level for lints which produce warnings]'
    'while-true[suggest using `loop { }` instead of `while true { }`]'
)

_rustc_opts_debug=(
    'asm-comments[generate comments into the assembly (may change behavior)]'
    'borrowck-stats[gather borrowck statistics]'
    'count-llvm-insns[count where LLVM instrs originate]'
    'count-type-sizes[count the sizes of aggregate types]'
    'debug-info[Produce debug info (experimental)]'
    'debug-llvm[enable debug output from LLVM]'
    'extra-debug-info[Extra debugging info (experimental)]'
    'gc[Garbage collect shared data (experimental)]'
    'gen-crate-map[Force generation of a toplevel crate map]'
    'lto[Perform LLVM link-time optimizations]'
    'meta-stats[gather metadata statistics]'
    "no-integrated-as[Use external assembler rather than LLVM's integrated one]"
    'no-landing-pads[omit landing pads for unwinding]'
    'no-opt[do not optimize, even if -O is passed]'
    "no-prepopulate-passes[Don't pre-populate the pass managers with a list of passes, only use the passes from --passes]"
    "no-vectorize-loops[Don't run the loop vectorization optimization passes]"
    "no-vectorize-slp[Don't run LLVM's SLP vectorization passes]"
    'no-verify[skip LLVM verification]'
    'prefer-dynamic[Prefer dynamic linking to static linking]'
    'print-link-args[Print the arguments passed to the linker]'
    'print-llvm-passes[Prints the llvm optimization passes being run]'
    'soft-float[Generate software floating point library calls]'
    'time-llvm-passes[measure time of each LLVM pass]'
    'time-passes[measure time of each rustc pass]'
    'trans-stats[gather trans statistics]'
    'verbose[in general, enable more debug printouts]'
)

_rustc_opts_fun_lint(){
    _values -s , 'options' \
        "$_rustc_opts_lint[@]"
}

_rustc_opts_fun_debug(){
    _describe 'options' _rustc_opts_debug
}

_arguments -s :  \
    '(-W --warn)'{-W,--warn}'[Set lint warnings]:lint options:_rustc_opts_fun_lint' \
    '(-A --allow)'{-A,--allow}'[Set lint allowed]:lint options:_rustc_opts_fun_lint' \
    '(-D --deny)'{-D,--deny}'[Set lint denied]:lint options:_rustc_opts_fun_lint' \
    '(-F --forbid)'{-F,--forbid}'[Set lint forbidden]:lint options:_rustc_opts_fun_lint' \
    '*-Z[Set internal debugging options]:debug options:_rustc_opts_fun_debug' \
    "$_rustc_opts_switches[@]" \
    '*::files:_files -g "*.rs"'
